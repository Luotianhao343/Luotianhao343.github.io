<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JackLuo&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-11-08T02:01:36.032Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>JackLuo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>maven初识</title>
    <link href="http://yoursite.com/2018/11/06/maven%E5%88%9D%E8%AF%86/"/>
    <id>http://yoursite.com/2018/11/06/maven初识/</id>
    <published>2018-11-06T12:08:55.953Z</published>
    <updated>2018-11-08T02:01:36.032Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Maven命令"><a href="#Maven命令" class="headerlink" title="Maven命令"></a>Maven命令</h2><ol><li>mvn compile编译</li><li>mvn install编译，运行和发布</li><li>mvn package 编译、运行但不发布，就是不会把target内容发布到本地仓库</li><li>mvn test编译，负责编译test包下面有相关java和运行，但是不会发布到本地仓库中</li><li>mvn clean清除，清除target内容</li><li>mvn archetype:generate生成一个maven工程目录以及pom文件等等</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mvn archetype:generate  </span><br><span class="line"> -DgroupId=[your project<span class="string">'s group id]  </span></span><br><span class="line"><span class="string"> -DartifactId=[your project'</span>s artifact id]  </span><br><span class="line"> -DarchetypeArtifactId=maven-archetype-archetype</span><br></pre></td></tr></table></figure><h2 id="IDEA创建Maven项目"><a href="#IDEA创建Maven项目" class="headerlink" title="IDEA创建Maven项目"></a>IDEA创建Maven项目</h2><h3 id="1-先创建好一个Maven项目"><a href="#1-先创建好一个Maven项目" class="headerlink" title="1.先创建好一个Maven项目"></a>1.先创建好一个Maven项目</h3><p>第一步：<img src="/images/maven/maven创建1.png" alt=""></p><p><img src="/images/maven/maven创建4.png" alt=""></p><p>第二步：<img src="/images/maven/maven创建2.png" alt=""></p><p>第三步：<img src="/images/maven/maven创建3.png" alt=""></p><h3 id="2-将项目下的main目录下Java目录加载为sources-root和test目录下Java目录加载为test-sources-root"><a href="#2-将项目下的main目录下Java目录加载为sources-root和test目录下Java目录加载为test-sources-root" class="headerlink" title="2.将项目下的main目录下Java目录加载为sources root和test目录下Java目录加载为test sources root"></a>2.将项目下的main目录下Java目录加载为sources root和test目录下Java目录加载为test sources root</h3><h3 id="3-最右侧工具栏Maven：Projects代替CMD命令行下的命令操作"><a href="#3-最右侧工具栏Maven：Projects代替CMD命令行下的命令操作" class="headerlink" title="3.最右侧工具栏Maven：Projects代替CMD命令行下的命令操作"></a>3.最右侧工具栏Maven：Projects代替CMD命令行下的命令操作</h3><h2 id="重写index-jsp文件"><a href="#重写index-jsp文件" class="headerlink" title="重写index.jsp文件"></a>重写index.jsp文件</h2><p>使用!+[Tab键]可以快速生成一个html模板</p><p><img src="/images/maven/maven创建5.png" alt=""></p><h2 id="使用pom-xml文件导入新的依赖（导入包）"><a href="#使用pom-xml文件导入新的依赖（导入包）" class="headerlink" title="使用pom.xml文件导入新的依赖（导入包）"></a>使用pom.xml文件导入新的依赖（导入包）</h2><p><img src="/images/maven/maven创建6.png" alt=""></p><p><img src="/images/maven/maven创建7.png" alt=""></p><p><img src="/images/maven/maven创建8.png" alt=""></p><h2 id="写Html的一些注意事项"><a href="#写Html的一些注意事项" class="headerlink" title="写Html的一些注意事项"></a>写Html的一些注意事项</h2><p><img src="/images/maven/html注意.png" alt=""></p><p>在写表单的时候注意是form</p><h2 id="pom文件中jar包的导入"><a href="#pom文件中jar包的导入" class="headerlink" title="pom文件中jar包的导入"></a>pom文件中jar包的导入</h2><p><img src="/images/maven/pom配置.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Maven命令&quot;&gt;&lt;a href=&quot;#Maven命令&quot; class=&quot;headerlink&quot; title=&quot;Maven命令&quot;&gt;&lt;/a&gt;Maven命令&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;mvn compile编译&lt;/li&gt;
&lt;li&gt;mvn install编译，运行和发布&lt;/
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>命令行操作数据库基操</title>
    <link href="http://yoursite.com/2018/11/05/%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%93%8D/"/>
    <id>http://yoursite.com/2018/11/05/命令行操作数据库基操/</id>
    <published>2018-11-05T01:33:09.111Z</published>
    <updated>2018-11-05T01:33:09.263Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命令行操作数据库基本操作（下面给的全是在win10CMD命令下的操作）"><a href="#命令行操作数据库基本操作（下面给的全是在win10CMD命令下的操作）" class="headerlink" title="命令行操作数据库基本操作（下面给的全是在win10CMD命令下的操作）"></a>命令行操作数据库基本操作（下面给的全是在win10CMD命令下的操作）</h2><h3 id="切换进入bin目录"><a href="#切换进入bin目录" class="headerlink" title="切换进入bin目录"></a>切换进入bin目录</h3><ol><li>D:</li><li>cd Web</li><li>cd mysql-[Tab]</li><li>cd bin</li></ol><h3 id="进入数据库"><a href="#进入数据库" class="headerlink" title="进入数据库"></a>进入数据库</h3><ol><li>mysql -u root -p</li><li>输入数据库密码</li></ol><h3 id="展示数据库"><a href="#展示数据库" class="headerlink" title="展示数据库"></a>展示数据库</h3><ol><li>show databases;</li><li>use [表名];</li></ol><h3 id="查询库中表"><a href="#查询库中表" class="headerlink" title="查询库中表"></a>查询库中表</h3><ol><li>select * from [表名];</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;命令行操作数据库基本操作（下面给的全是在win10CMD命令下的操作）&quot;&gt;&lt;a href=&quot;#命令行操作数据库基本操作（下面给的全是在win10CMD命令下的操作）&quot; class=&quot;headerlink&quot; title=&quot;命令行操作数据库基本操作（下面给的全是在wi
      
    
    </summary>
    
      <category term="DataBase" scheme="http://yoursite.com/categories/DataBase/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaWeb开发Http异常</title>
    <link href="http://yoursite.com/2018/10/28/JavaWeb%E5%BC%80%E5%8F%91Http%E5%BC%82%E5%B8%B8/"/>
    <id>http://yoursite.com/2018/10/28/JavaWeb开发Http异常/</id>
    <published>2018-10-28T13:55:42.167Z</published>
    <updated>2018-10-28T14:07:26.225Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Http-500-和-404异常"><a href="#Http-500-和-404异常" class="headerlink" title="Http 500 和 404异常"></a>Http 500 和 404异常</h2><p>500 异常：服务器内部错误</p><p>404 异常：服务器找不到请求的页面</p><h3 id="500异常"><a href="#500异常" class="headerlink" title="500异常"></a>500异常</h3><p>500错误，主要错误出现在服务器内部的错误，程序上的错误，用户权限的问题，或者是数据库连接出现了问题。</p><p><img src="/images/实战/500yichang.png" alt=""></p><p>这个异常发生在我写JDBC操作数据库时，ResultSet对象的引用没有关联到stmt.excute()方法的返回对象。其实就是数据库的连接出现了问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Message&gt; <span class="title">getMessages</span><span class="params">(<span class="keyword">int</span> page,<span class="keyword">int</span> pageSize)</span></span>&#123;</span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        *<span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> page 当前页码</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> pageSize 每页记录数</span></span><br><span class="line"><span class="comment">        *<span class="doctag">@return</span> java.util.List&lt;com.imooc.jdbc.bean.Message&gt;</span></span><br><span class="line"><span class="comment">        **/</span></span><br><span class="line">        Connection conn = ConnectionUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//limit m，n从第m条开始，取出共n条记录</span></span><br><span class="line">        String sql = <span class="string">"select * from message order by create_time desc limit ?,?"</span>;</span><br><span class="line">        PreparedStatement stmt = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        List&lt;Message&gt; messages = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            stmt = conn.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//setInt()是为了给sql语句中的？？动态给条件。</span></span><br><span class="line">            stmt.setInt(<span class="number">1</span>,(page-<span class="number">1</span>)*pageSize);</span><br><span class="line">            stmt.setInt(<span class="number">2</span>,pageSize);</span><br><span class="line">            <span class="comment">//下面这句就是罪魁祸首，stmt.executeQuery方法执行后，忘记将他返回的对象指向rs的引用，就是他导致的空指针异常，进而引起500异常</span></span><br><span class="line">            rs = stmt.executeQuery();</span><br><span class="line">            <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">                messages.add(<span class="keyword">new</span> Message(rs.getLong(<span class="string">"id"</span>),</span><br><span class="line">                        rs.getLong(<span class="string">"user_id"</span>),</span><br><span class="line">                        rs.getString(<span class="string">"username"</span>),</span><br><span class="line">                        rs.getString(<span class="string">"title"</span>),</span><br><span class="line">                        rs.getString(<span class="string">"content"</span>),</span><br><span class="line">                        rs.getTimestamp(<span class="string">"create_time"</span>)</span><br><span class="line">                ));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            ConnectionUtil.release(rs,stmt,conn);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="request的setAttribute-用法"><a href="#request的setAttribute-用法" class="headerlink" title="request的setAttribute()用法"></a>request的setAttribute()用法</h2><p>setAttribute()用来在同一个request周期中保存变量使用。比如servlet调用后，引出一个JSP页面，这就是一个request的生命周期。</p><p>通常情况下，setAttribute()方法都和RequestDispatcher.forward()一起使用。比如说：在A页面中写一个setAttribute()，并且写一个RequestDispatcher.forward()指向B页面；那就是说服务器给出的response是B页面，并且只有一次request和response；所以能在B页面取到request.setAtribute里的值，地址栏的url仍然是A页面的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Http-500-和-404异常&quot;&gt;&lt;a href=&quot;#Http-500-和-404异常&quot; class=&quot;headerlink&quot; title=&quot;Http 500 和 404异常&quot;&gt;&lt;/a&gt;Http 500 和 404异常&lt;/h2&gt;&lt;p&gt;500 异常：服务器内部错误
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>必备知识</title>
    <link href="http://yoursite.com/2018/10/19/%E9%9D%A2%E8%AF%95%E5%BF%85%E5%A4%87%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2018/10/19/面试必备知识/</id>
    <published>2018-10-19T09:39:34.260Z</published>
    <updated>2018-10-24T11:58:36.346Z</updated>
    
    <content type="html"><![CDATA[<h3 id="HashMap和HashTable的区别？"><a href="#HashMap和HashTable的区别？" class="headerlink" title="HashMap和HashTable的区别？"></a>HashMap和HashTable的区别？</h3><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">线程安全性</th><th style="text-align:center">同步(Synchronized)</th><th style="text-align:center">效率</th><th style="text-align:center">null key与null value</th><th style="text-align:center">重复</th></tr></thead><tbody><tr><td style="text-align:center">HashMap</td><td style="text-align:center">不安全</td><td style="text-align:center">非同步</td><td style="text-align:center">高</td><td style="text-align:center">允许null key和null value</td><td style="text-align:center">不能有重复键，可以有重复值</td></tr><tr><td style="text-align:center">HashTable</td><td style="text-align:center">安全</td><td style="text-align:center">同步</td><td style="text-align:center">低</td><td style="text-align:center">不允许null key和null value</td></tr></tbody></table><p>在Java 5提供了ConcurrentHashMap，它是HashTable的替代，比HashTable的扩展性更好。</p><p>HashTable是线程安全的，多个线程可以共享一个HashTable。  HashMap中的键和值都是对象。不能有重复键，可以有重复值。</p><p>HashMap的迭代器是fail-fast迭代器，HashTable的enumerator迭代器不是fail-fast；所以当有其他线程改变HashMap的结构，将会抛出ConcurrentModificationException异常。  </p><p>HashMap不能保证随着时间的推移Map中的元素次序是不变的。</p><p>HashMap使用下面的语句进行同步：Map m = Collections.synchronizedMap(hashMap);</p><h3 id="ArrayList和LinkedList和Vector的区别？"><a href="#ArrayList和LinkedList和Vector的区别？" class="headerlink" title="ArrayList和LinkedList和Vector的区别？"></a>ArrayList和LinkedList和Vector的区别？</h3><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">同步(Synchronized)</th><th style="text-align:center">数据增长</th><th style="text-align:center">查找、插入、删除对象的效率</th><th style="text-align:center">基于什么</th></tr></thead><tbody><tr><td style="text-align:center">ArrayList</td><td style="text-align:center">非同步</td><td style="text-align:center">扩展时，增长原来的50%</td><td style="text-align:center">检索一个对象或者在集合末尾插入/删除一个对象时间复杂度：O(1)</td><td style="text-align:center">动态数组</td></tr><tr><td style="text-align:center">LinkedList</td><td style="text-align:center">非同步</td><td style="text-align:center"></td><td style="text-align:center">插入/删除时间复杂度：O(1)，检索一个元素为：O(n)</td><td style="text-align:center">双向链表</td></tr><tr><td style="text-align:center">Vector</td><td style="text-align:center">同步（线程安全）</td><td style="text-align:center">扩展时，自动增长原来一倍的数组长度</td><td style="text-align:center"></td></tr></tbody></table><p>对于随机访问get和set，ArrayList优于LinkedList，因为LinkedList要移动指针。</p><p>ArrayList在集合中（非最后一个）增加或者移除元素意味着这个列表中剩余的元素都要移动，它的时间复杂度线性增长为O(n-i),其中在进行插入或者删除时，集合中第i和第i个元素之后的所有元素都要执行(n-i)个对象的位移操作。</p><p>如果只是查找特定位置的元素或者只在集合的末端增加、移除元素，那么使用Vector和ArrayList都可以。如果对其他位置插入、删除操作，最好选择LinkedList。</p><h3 id="TreeMap和TreeSet的区别？"><a href="#TreeMap和TreeSet的区别？" class="headerlink" title="TreeMap和TreeSet的区别？"></a>TreeMap和TreeSet的区别？</h3><p>TreeSet底层是通过TreeMap来实现的（如同HashSet底层是通过HashMap来实现的）。TreeMap的实现就是红黑树算法。</p><p>TreeSet和TreeMap的相同点：</p><table><thead><tr><th></th><th>集合</th><th>同步(Synchronized)</th><th>运行速度</th></tr></thead><tbody><tr><td>TreeSet与TreeMap相同点</td><td>有序</td><td>非同步集合</td><td>慢于Hash，时间复杂度为O(logN)</td></tr></tbody></table><p>TreeSet和TreeMap的不同点：</p><table><thead><tr><th></th><th>存储的对象</th><th>重复对象</th><th>实现接口</th><th>null key null value</th></tr></thead><tbody><tr><td>TreeSet</td><td>存储一个对象</td><td>不能有重复对象</td><td>Set</td><td></td></tr><tr><td>TreeMap</td><td>存储两个对象(key-value)</td><td>可以有重复对象</td><td>Map</td><td>不允许为null key，可以是null value</td></tr></tbody></table><h3 id="通过HashMap和HashSet源码分析Hash存储机制"><a href="#通过HashMap和HashSet源码分析Hash存储机制" class="headerlink" title="通过HashMap和HashSet源码分析Hash存储机制"></a>通过HashMap和HashSet源码分析Hash存储机制</h3><p>对于HashSet系统采用Hash算法决定集合元素的存储位置，这样可以保证快速存取集合元素；对于HashMap，系统key-value当成一个整体来处理，系统根据Hash算法来计算出key-value的存储位置，这样保证能快速存取Map的key-value对。</p><p>Java集合实际上是多个引用变量所组成的集合，这些引用变量指向实际的Java对象。</p><h4 id="HashMap："><a href="#HashMap：" class="headerlink" title="HashMap："></a>HashMap：</h4><p>当系统决定存储HashMap中的key-value对时，完全没有考虑Entry中的value，仅仅只是根据key来计算并决定每个Entry的存储位置。</p><p>当向HashMap中添加key-value对，由其key的hashCode()返回值决定该key-value对（就是Entry对象）的存储位置。当两个Entry对象的key的hashCode()返回值相同时，将由key通过equals()比较值决定是采用覆盖行为（返回true），还是产生Entry链（返回false）。</p><h4 id="HashSet："><a href="#HashSet：" class="headerlink" title="HashSet："></a>HashSet：</h4><p>HashSet的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSet</span>&lt;<span class="title">E</span>&gt; </span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">E</span>&gt; </span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Set</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">    <span class="comment">// 使用 HashMap 的 key 保存 HashSet 中所有元素</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> HashMap&lt;E,Object&gt; map; </span><br><span class="line">    <span class="comment">// 定义一个虚拟的 Object 对象作为 HashMap 的 value </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object PRESENT = <span class="keyword">new</span> Object(); </span><br><span class="line">    ... </span><br><span class="line">    <span class="comment">// 初始化 HashSet，底层会初始化一个 HashMap </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;E,Object&gt;(); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 以指定的 initialCapacity、loadFactor 创建 HashSet </span></span><br><span class="line">    <span class="comment">// 其实就是以相应的参数创建 HashMap </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;E,Object&gt;(initialCapacity, loadFactor); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;E,Object&gt;(initialCapacity); </span><br><span class="line">    &#125; </span><br><span class="line">    HashSet(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor, <span class="keyword">boolean</span> dummy) </span><br><span class="line">    &#123; </span><br><span class="line">        map = <span class="keyword">new</span> LinkedHashMap&lt;E,Object&gt;(initialCapacity </span><br><span class="line">            , loadFactor); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 调用 map 的 keySet 来返回所有的 key </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> map.keySet().iterator(); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 调用 HashMap 的 size() 方法返回 Entry 的数量，就得到该 Set 里元素的个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> map.size(); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 调用 HashMap 的 isEmpty() 判断该 HashSet 是否为空，</span></span><br><span class="line">    <span class="comment">// 当 HashMap 为空时，对应的 HashSet 也为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> map.isEmpty(); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 调用 HashMap 的 containsKey 判断是否包含指定 key </span></span><br><span class="line">    <span class="comment">//HashSet 的所有元素就是通过 HashMap 的 key 来保存的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> map.containsKey(o); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 将指定元素放入 HashSet 中，也就是将该元素作为 key 放入 HashMap </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> map.put(e, PRESENT) == <span class="keyword">null</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 调用 HashMap 的 remove 方法删除指定 Entry，也就删除了 HashSet 中对应的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> map.remove(o)==PRESENT; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 调用 Map 的 clear 方法清空所有 Entry，也就清空了 HashSet 中所有元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        map.clear(); </span><br><span class="line">    &#125; </span><br><span class="line">    ... </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的源程序可以看出，HashSet的实现其实非常简单，它只是封装了一个HashMap对象来存储所有的集合元素，所有放入HashSet中的集合元素实际上由HashMap的key来保存，而HashMap的value则存储了一个PRESENT，它是一个静态的Object对象。</p><p>HashMap的put方法源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="comment">// 如果 key 为 null，调用 putForNullKey 方法进行处理</span></span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span>) </span><br><span class="line">        <span class="keyword">return</span> putForNullKey(value); </span><br><span class="line">    <span class="comment">// 根据 key 的 keyCode 计算 Hash 值</span></span><br><span class="line">    <span class="keyword">int</span> hash = hash(key.hashCode()); </span><br><span class="line">    <span class="comment">// 搜索指定 hash 值在对应 table 中的索引</span></span><br><span class="line">    <span class="keyword">int</span> i = indexFor(hash, table.length);</span><br><span class="line">    <span class="comment">// 如果 i 索引处的 Entry 不为 null，通过循环不断遍历 e 元素的下一个元素</span></span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) </span><br><span class="line">    &#123; </span><br><span class="line">        Object k; </span><br><span class="line">        <span class="comment">// 找到指定 key 与需要放入的 key 相等（hash 值相同</span></span><br><span class="line">        <span class="comment">// 通过 equals 比较放回 true）</span></span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key </span><br><span class="line">            || key.equals(k))) </span><br><span class="line">        &#123; </span><br><span class="line">            V oldValue = e.value; </span><br><span class="line">            e.value = value; </span><br><span class="line">            e.recordAccess(<span class="keyword">this</span>); </span><br><span class="line">            <span class="keyword">return</span> oldValue; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 如果 i 索引处的 Entry 为 null，表明此处还没有 Entry </span></span><br><span class="line">    modCount++; </span><br><span class="line">    <span class="comment">// 将 key、value 添加到 i 索引处</span></span><br><span class="line">    addEntry(hash, key, value, i); </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果向HashSet中添加一个已经存在的元素，新添加的集合元素（底层由HashMap的key保存）不会覆盖已有的集合元素。因为HashSet的add()方法添加集合元素时实际上转变为调用HashMap的put()方法来添加key-value对，当放入HashMap的Entry中key与集合中原有Entry的key相同（hashCode()返回值相等，通过equals比较也返回true），新添加的Entry的value会覆盖之前的value，但key不会有任何改变，所以HashSet添加已存在的元素不会覆盖已有元素。</p><h5 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String first; </span><br><span class="line">    <span class="keyword">private</span> String last; </span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Name</span><span class="params">(String first, String last)</span> </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.first = first; </span><br><span class="line">        <span class="keyword">this</span>.last = last; </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) </span><br><span class="line">        &#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>; </span><br><span class="line">        &#125; </span><br><span class="line">         </span><br><span class="line">    <span class="keyword">if</span> (o.getClass() == Name.class) </span><br><span class="line">        &#123; </span><br><span class="line">            Name n = (Name)o; </span><br><span class="line">            <span class="keyword">return</span> n.first.equals(first) </span><br><span class="line">                &amp;&amp; n.last.equals(last); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSetTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        Set&lt;Name&gt; s = <span class="keyword">new</span> HashSet&lt;Name&gt;();</span><br><span class="line">        s.add(<span class="keyword">new</span> Name(<span class="string">"abc"</span>, <span class="string">"123"</span>));</span><br><span class="line">        System.out.println(</span><br><span class="line">            s.contains(<span class="keyword">new</span> Name(<span class="string">"abc"</span>, <span class="string">"123"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际运行上面程序会输出false，因为s.contains(new Name(“abc”, “123”))这一句中new了一个Name对象，引用已经不是上面的Name(“abc”,”123”)了。HashSet判断两个对象相等的标准除了要求通过equals()方法比较返回true之外，还要求两个对象的hashCode()方法返回值相等。而上面的程序没有重写Name类的hashCode()方法，两个Name对象的hashCode()返回值并不相同，HashSet会把它们当成两个对象处理，因此程序返回false。</p><p>所以，当我们要把某个类的对象当成HashMap的key，或者要将这个类的对象放入HashSet中保存时，重写该类的equals(Object obj)方法和hashCode()方法很重要，而且这两个方法的返回值必须保持一致：当该类的两个hashCode()返回值相同时，他们通过equals()方法比较也应该返回true。</p><h6 id="下面程序就重写了hashCode-和equals-方法"><a href="#下面程序就重写了hashCode-和equals-方法" class="headerlink" title="下面程序就重写了hashCode()和equals()方法"></a>下面程序就重写了hashCode()和equals()方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">    <span class="keyword">private</span> String first;</span><br><span class="line">    <span class="keyword">private</span> String last;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Name</span><span class="params">(String first, String last)</span></span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.first = first; </span><br><span class="line">        <span class="keyword">this</span>.last = last; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 根据 first 判断两个 Name 是否相等</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) </span><br><span class="line">        &#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">if</span> (o.getClass() == Name.class) </span><br><span class="line">        &#123; </span><br><span class="line">            Name n = (Name)o; </span><br><span class="line">            <span class="keyword">return</span> n.first.equals(first); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>; </span><br><span class="line">    &#125; </span><br><span class="line">      </span><br><span class="line">    <span class="comment">// 根据 first 计算 Name 对象的 hashCode() 返回值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> first.hashCode(); </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Name[first="</span> + first + <span class="string">", last="</span> + last + <span class="string">"]"</span>; </span><br><span class="line">    &#125; </span><br><span class="line"> &#125; </span><br><span class="line">  </span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSetTest2</span> </span></span><br><span class="line"><span class="class"> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        HashSet&lt;Name&gt; set = <span class="keyword">new</span> HashSet&lt;Name&gt;(); </span><br><span class="line">        set.add(<span class="keyword">new</span> Name(<span class="string">"abc"</span> , <span class="string">"123"</span>)); </span><br><span class="line">        set.add(<span class="keyword">new</span> Name(<span class="string">"abc"</span> , <span class="string">"456"</span>)); </span><br><span class="line">        System.out.println(set); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个程序的主方法先将第一个Name对象添加到HashSet中，该Name对象的first实例的变量值为“abc”，接着再试着将一个first为”abc”的Name对象添加到HashSet中，此时无法将新的Name对象添加到该HashSet中</p><h3 id="String-StringBuffer-StringBuilder的区别？"><a href="#String-StringBuffer-StringBuilder的区别？" class="headerlink" title="String StringBuffer StringBuilder的区别？"></a>String StringBuffer StringBuilder的区别？</h3><table><thead><tr><th></th><th>线程安全性</th><th>用处</th></tr></thead><tbody><tr><td>String</td><td></td><td>适用于少量的字符串操作的情况</td></tr><tr><td>StringBuffer</td><td>安全</td><td>适用于多线程下字符缓冲区进行大量操作的情况</td></tr><tr><td>StringBuilder</td><td>不安全</td><td>适用于单线程下在字符缓冲区进行大量操作的情况</td></tr></tbody></table><p>String：被final修饰，字符串常量，字符串长度不可变。Java中对String对象的操作实际上是一个不断创建新的对象并且将旧的对象回收的一个过程，所以执行速度很慢。</p><p>StringBuffer和StringBuilder：对象都是变量。StringBuffer 和 StringBuilder 类的对象能够被多次的修改，并且不产生新的未使用对象，不进行创建和回收的操作，所以执行速度比String快。但是StringBuffer是线程安全的，所以运行速度慢一点。</p><p>三者在运行速度方面，StringBuilder最快、String最慢。</p><h3 id="Java多线程机制，实现多线程的方式？"><a href="#Java多线程机制，实现多线程的方式？" class="headerlink" title="Java多线程机制，实现多线程的方式？"></a>Java多线程机制，实现多线程的方式？</h3><p>Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器都只会执行一条线程中的指令。</p><h6 id="方式一：实现Runnable接口并重写run-方法"><a href="#方式一：实现Runnable接口并重写run-方法" class="headerlink" title="方式一：实现Runnable接口并重写run()方法"></a>方式一：实现Runnable接口并重写run()方法</h6><p>适用于类已经继承了另一个类，就无法继承Thread类，此时必须实现一个Runnable接口。</p><h6 id="方式二：使用Thread：继承Thread类"><a href="#方式二：使用Thread：继承Thread类" class="headerlink" title="方式二：使用Thread：继承Thread类"></a>方式二：使用Thread：继承Thread类</h6><h6 id="方式三：使用ExecutorService、Callable、Future实现有返回结果的多线程"><a href="#方式三：使用ExecutorService、Callable、Future实现有返回结果的多线程" class="headerlink" title="方式三：使用ExecutorService、Callable、Future实现有返回结果的多线程"></a>方式三：使用ExecutorService、Callable、Future实现有返回结果的多线程</h6><h3 id="线程有几种状态？Java线程阻塞调用wait函数和sleep的区别和联系，还有函数yield、notify等的作用？"><a href="#线程有几种状态？Java线程阻塞调用wait函数和sleep的区别和联系，还有函数yield、notify等的作用？" class="headerlink" title="线程有几种状态？Java线程阻塞调用wait函数和sleep的区别和联系，还有函数yield、notify等的作用？"></a>线程有几种状态？Java线程阻塞调用wait函数和sleep的区别和联系，还有函数yield、notify等的作用？</h3><p>有五种生命状态：新建(New)、就绪(Runnable)、运行(Running)、阻塞(Blocked)、死亡(Dead)。</p><ol><li>wait函数是Object的方法，sleep是Thread类的方法</li><li>wait()方法是：当前线程暂时退出并让出同步资源锁，以便其他正在等待该资源的线程得到该资源进而运行，只有调用二零notify()方法，之前调用wait()的线程才会解除wait状态。（notify只是唤醒之前调用wait的线程，不会分配任务）</li><li>sleep()方法是：当前线程主动让出CPU，在sleep指定时间后CPU再回到该线程继续执行。不会释放对象锁。</li><li>notify()、notifyAll()是Object类的方法，yield()是Thread类的方法。</li><li>调用过wait()方法的对象可以通过调用notify()唤醒，notifyAll是唤醒所有的线程。yield()是暂停线程，不过不能指定暂停的时间，也不能保证当前线程马上停止；yield()只是让线程从运行态转变为就绪态。</li></ol><h3 id="Java中的同步机制-Synchronized，锁机制？"><a href="#Java中的同步机制-Synchronized，锁机制？" class="headerlink" title="Java中的同步机制 Synchronized，锁机制？"></a>Java中的同步机制 Synchronized，锁机制？</h3><p>Synchronized关键字可以作为函数的修饰符、也可做为函数内的语句，也就是同步方法和同步语句代码块。</p><p>同步方法，它锁定的是调用这个同步方法的对象。下面的method()方法被相同对象在不同线程中执行会形成互斥，达到同步的效果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Public <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;    </span><br><span class="line"><span class="comment">//….    </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同步语句代码块，锁就是so这个对象，谁拿到这个对象就能运行他所控制的那段代码。当有一个明确的对象作为锁时，就能够这样写程式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(SomeObject so)</span> </span>&#123;    </span><br><span class="line"><span class="keyword">synchronized</span>(so)    </span><br><span class="line">&#123;    </span><br><span class="line">       <span class="comment">//…..    </span></span><br><span class="line">&#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Java对象的四种引用类型"><a href="#Java对象的四种引用类型" class="headerlink" title="Java对象的四种引用类型"></a>Java对象的四种引用类型</h3><p>从JDK1.2开始，把对象的引用分为4种级别、从而使程序能更加灵活地控制对象的生命周期。这四种级别由高到低依次为：强引用、软引用、弱引用、虚引用。</p><ol><li><p>强引用（StrongReference）</p><p>使用最普遍的引用。如果一个对象具有强引用，那垃圾回收器绝不会回收它。当内存不足时，Java虚拟机抛出OutOfMemoryError错误，使程序异常终止，也不回收具有强引用的对象来解决内存不足的问题。</p></li><li><p>软引用（SoftReference）</p><p>如果一个对象只有软引用，则内存空间足够，垃圾回收器就不会回收它；如果内存空间不足了，就会回收这些对象的内存。</p></li><li><p>弱引用（WeakReference）</p><p>弱引用和软引用的区别是：只具有弱引用的对象拥有更短的生命周期。在垃圾回收器线程扫描它所管理的内存区域过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。</p></li><li><p>虚引用（PhantomReference）</p><p>字如其名，就是形同虚设，与强软弱引用都不一样。虚引用不会决定对象的生命周期。如果一个对象仅有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。</p></li></ol><h3 id="Java中的异常机制？"><a href="#Java中的异常机制？" class="headerlink" title="Java中的异常机制？"></a>Java中的异常机制？</h3><ol><li><p>异常机制的层次结构</p><p>Java中，所有的异常对象都派生自Throwable类，如果Java中内置的异常类不能满足要求，可以自定义异常类，只需要继承Throwable类即可。Throwable类有两个重要的子类：</p><p>Error(错误)：Java内部错误</p><p>Exception(异常)：程序本身可以处理的异常</p></li><li><p>异常的处理过程</p><ul><li><p>抛出异常：throws、throw关键字</p><p>使用throws将程序中可能遇到的异常向上抛出，而本身不做处理。throw是主动抛出异常，一般和if语句配合比较多。</p></li><li><p>捕获异常（处理异常）</p><p>抛出的异常，总是需要处理的。使用try{}catch{}关键字，try中代码表示可能出现异常的代码块，catch中的代码块表示捕捉到该异常之后的后续操作。finally关键字用来完成对资源的关闭。</p></li></ul></li></ol><h3 id="Comparable接口和Comparator接口实现比较的区别和用法？"><a href="#Comparable接口和Comparator接口实现比较的区别和用法？" class="headerlink" title="Comparable接口和Comparator接口实现比较的区别和用法？"></a>Comparable接口和Comparator接口实现比较的区别和用法？</h3><p>实现接口的同时，使用泛型规定要进行比较的对象所属的类。Comparable是位于lang包下，实现compareTo()方法；Comparator是位于util包下，实现compare()方法。</p><h3 id="Java的23种设计模式中常用的设计模式？"><a href="#Java的23种设计模式中常用的设计模式？" class="headerlink" title="Java的23种设计模式中常用的设计模式？"></a>Java的23种设计模式中常用的设计模式？</h3><ul><li>创建者模式：单例设计模式、抽象工厂模式、建造者模式、工厂模式、原型模式</li><li>结构型模式：适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式</li><li>行为型模式：模板方法模式、命令模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、状态模式、策略模式、职责链模式、访问者模式</li></ul><h3 id="SSM框架面试"><a href="#SSM框架面试" class="headerlink" title="SSM框架面试"></a>SSM框架面试</h3><h4 id="简单介绍一下对springMVC的理解？"><a href="#简单介绍一下对springMVC的理解？" class="headerlink" title="简单介绍一下对springMVC的理解？"></a>简单介绍一下对springMVC的理解？</h4><ul><li>基于组件技术。全部的应用对象，无论控制器和视图，还是业务对象，都是Java组件</li><li>不依赖于Servlet API</li><li>可以任意使用各种视图技术，不仅仅局限于JSP</li><li>支持各种请求资源的映射策略</li><li>应该是易于扩展的</li></ul><h4 id="SpringMVC的工作流程？"><a href="#SpringMVC的工作流程？" class="headerlink" title="SpringMVC的工作流程？"></a>SpringMVC的工作流程？</h4><ol><li>用户发送请求到前端控制器DispatcherServlet</li><li>DispatcherServlet解析收到的请求，得到资源标识符URI，调用HandlerMapping获得该Handler，并将控制器controller返回给DispatcherServlet</li><li>DispatcherServlet通过HandlerAdapter适配器调用处理器</li><li>执行处理器Controller，返回模型和视图（MV）</li><li>HandlerAdapter将MV返回给DispatcherServlet</li><li>DispatcherServlet将MV传给ViewReslover视图解析器，返回具体的View</li><li>DispatcherServlet将模型数据填充到视图中。</li></ol><h4 id="如果也用过struts2，简单介绍一下SpringMVC和struts2的区别"><a href="#如果也用过struts2，简单介绍一下SpringMVC和struts2的区别" class="headerlink" title="如果也用过struts2，简单介绍一下SpringMVC和struts2的区别"></a>如果也用过struts2，简单介绍一下SpringMVC和struts2的区别</h4><ul><li>SpringMVC的入口是DispatcherServlet前端控制器，而struts2是一个过滤器</li><li>SpringMVC是一个url对应一个方法，struts2是基于类开发</li></ul><h4 id="SSM优缺点，使用场景？"><a href="#SSM优缺点，使用场景？" class="headerlink" title="SSM优缺点，使用场景？"></a>SSM优缺点，使用场景？</h4><ol><li>mybatis可以优化sql，可以减少查询字段</li><li>hibernate数据库移植性比较好，mybatis在不同的数据库需要写不同的sql</li></ol><h4 id="简单介绍对mybatis的理解？"><a href="#简单介绍对mybatis的理解？" class="headerlink" title="简单介绍对mybatis的理解？"></a>简单介绍对mybatis的理解？</h4><ul><li>SqlMapConfig.xml作为mybatis的全局配置文件</li><li>mapper.xml是sql映射文件，配置操作数据库的sql语句</li><li>使用SqlSessionFactory会话工厂创建sqlSession来操作数据库</li></ul><h3 id="JDBC操作数据库的步骤？"><a href="#JDBC操作数据库的步骤？" class="headerlink" title="JDBC操作数据库的步骤？"></a>JDBC操作数据库的步骤？</h3><ol><li>加载数据库驱动</li><li>获取数据库连接</li><li>创建statement对象</li><li>定义sql语句</li><li>使用preparedStatement设置sql语句</li><li>使用statement执行sql</li><li>解析结果</li><li>关闭资源</li></ol><h3 id="Servlet的doget与dopost的区别？"><a href="#Servlet的doget与dopost的区别？" class="headerlink" title="Servlet的doget与dopost的区别？"></a>Servlet的doget与dopost的区别？</h3><ol><li>doget提交数据有大小限制，dopost没有</li><li>doget会将key和value明文显示；dopost传递数据是通过http请求附件，不会明文显示</li><li>doget安全性不如dopost</li></ol><h3 id="什么是OKHttp？"><a href="#什么是OKHttp？" class="headerlink" title="什么是OKHttp？"></a>什么是OKHttp？</h3><p>OKHttp和HttpClient类似，是一个Http客户端。</p><h3 id="什么是JSON？"><a href="#什么是JSON？" class="headerlink" title="什么是JSON？"></a>什么是JSON？</h3><p>JSON用来取代xml的数据结构，它比xml传输数据将减少更多流量，速度更快。</p><p>JSON就是一段字符串，其中{}表示对象，[]中表示数组，””内是属性或者值，：表示后者是前者的值。</p><h3 id="什么是key-value数据库？"><a href="#什么是key-value数据库？" class="headerlink" title="什么是key-value数据库？"></a>什么是key-value数据库？</h3><p>键值数据库，不能使用sql的查询语言。它的查询必须是要key已知的情况下，访问速度比关系型数据库快，不过要已知的key是限制。</p><h3 id="数据库事务执行的四个基本要素？"><a href="#数据库事务执行的四个基本要素？" class="headerlink" title="数据库事务执行的四个基本要素？"></a>数据库事务执行的四个基本要素？</h3><p>ACID，原子性，一致性，隔离性，持久性。</p><ul><li>原子性：整个事务中的所有操作，要么全部执行，要不全部不执行</li><li>一致性：事务必须始终保持一致</li><li>隔离性：事务执行必须隔离</li><li>持久性：数据库事务操作的结果不会回滚</li></ul><h3 id="Java虚拟机运行时数据区？"><a href="#Java虚拟机运行时数据区？" class="headerlink" title="Java虚拟机运行时数据区？"></a>Java虚拟机运行时数据区？</h3><p>有虚拟机栈、本地方法栈、程序计数器、方法区、堆。</p><ul><li>程序计数器：由于Java的多线程是线程轮流切换并分配处理器执行时间的方式来实现的。在任何一个确定的时刻，一个处理器都只会执行一条线程中的指令。因此，为了线程在切换后能恢复之前的执行位置，需要给每条线程都有一个独立的程序计数器，各条线程之间计数器互不影响。</li><li>Java虚拟机栈：Java虚拟机也是私有的，它的生命周期和线程一样。每个方法执行时都会创建栈帧用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法从调用到执行完成的过程，就对应着一个栈帧在Java虚拟机栈中入栈到出栈的过程。</li><li>本地方法栈：与虚拟机栈发挥的作用是非常相似的。他们的区别是Java虚拟机执行java方法服务，本地方法栈是执行native方法服务。</li><li>Java堆：被所有线程共享，在虚拟机启动时创建。此内存中存放的是对象实例。所有的对象实例和数组都要在堆上分配。GC堆的主要处理区域就是Java堆。由于现在的收集器基本都是分代收集算法，可以分为新生代和老年代，这样分始终是为了更快的分配和回收内存。</li><li>方法区：和Java堆类似都是被所有线程所共享的，它用于存储已加载的类的信息、常量、静态变量、即时编译器编译后的代码等数据。</li><li>运行时常量池：用于存放编译期生成的各种字面量和符号引用。</li></ul><h3 id="如何理解Java接口？"><a href="#如何理解Java接口？" class="headerlink" title="如何理解Java接口？"></a>如何理解Java接口？</h3><p>Java接口是功能的抽象，没有具体的实现。降低了耦合性。解决了Java不能多继承的弊端。</p><p>Java接口的定义是：使用interface关键字。其中的变量被固定的public static final修饰符修饰，方法被public abstract修饰。</p><p>如果某个非抽象类需要实现某个接口，那么必须重写其中的所有方法。</p><p>抽象类和接口的区别：抽象类不能多继承，接口可以多实现。抽象类中可以有实体方法，接口中全是抽象方法。当不仅需要定义共性行为，还要有独立方法时，采用抽象类。</p><h3 id="如何理解Java四大特性？（抽象、封装、继承、多态）"><a href="#如何理解Java四大特性？（抽象、封装、继承、多态）" class="headerlink" title="如何理解Java四大特性？（抽象、封装、继承、多态）"></a>如何理解Java四大特性？（抽象、封装、继承、多态）</h3><ul><li><p>抽象：同一类事物共有的特征和方法的集合。具体实现是使用抽象类和接口。抽象的好处是下次写类似的项目，可以再使用抽象层。</p></li><li><p>封装：把对象的特征和方法隐藏起来，不让外界能直接访问到；需要通过该类提供的方法来访问内部信息。</p></li><li><p>继承：子类通过继承来拥有父类的特征和提供的非私有的方法，提高代码复用性。缺点是也提高了耦合性。</p><p>子类继承父类的关系是is-a，父类更通用，子类更具体。子类可以重写父类的方法，也可以有自己的方法和属性。</p></li><li><p>多态：定义一个父类，多个父类对象的引用指向不同的子类，这些对象可以调用子类重写的父类方法。</p><p>多态的作用是消除类型之间的耦合关系。</p><p>多态存在的三个条件：继承，重写，父类对象的引用指向子类。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;HashMap和HashTable的区别？&quot;&gt;&lt;a href=&quot;#HashMap和HashTable的区别？&quot; class=&quot;headerlink&quot; title=&quot;HashMap和HashTable的区别？&quot;&gt;&lt;/a&gt;HashMap和HashTable的区别？&lt;/
      
    
    </summary>
    
      <category term="编程基础" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>一些快捷键</title>
    <link href="http://yoursite.com/2018/10/19/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://yoursite.com/2018/10/19/快捷键/</id>
    <published>2018-10-19T09:08:59.394Z</published>
    <updated>2018-11-05T01:01:58.204Z</updated>
    
    <content type="html"><![CDATA[<h3 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h3><ul><li>ctrl+enter在当前行下面新增一行，跳至该行</li><li>shift+enter在当前行上面增加一行并跳至该行</li><li>ctrl+←/→进行逐词移动</li><li>ctrl+shift+←/→进行逐词选择</li><li>ctrl+↑/↓移动当前显示区域</li><li>ctrl+shift+↑/↓移动当前行</li><li>xml中添加注释：ctrl+/</li><li>ctrl+p：查看默认方法</li><li>ctrl+o：快速查看可以重写的方法</li><li>Alt+数字 :用来跳转例如project的窗口</li><li>文件之间跳转：alt+←/→</li><li>Ctrl+N ： 快速搜索打开指定class</li><li>文件和编辑的跳转：Alt+1和esc</li><li>文件搜索：ctrl+shift+n</li><li>shift+f6：重构变量（名称）</li><li>抽取：<ul><li>抽取变量：ctrl+v</li><li>抽取静态变量：ctrl+c</li><li>抽取成员变量：ctrl+f</li><li>抽取函数：ctrl+alt+m</li></ul></li><li>alt+insert：打开选择面板（用来写一些必要的函数，例如get和set等）</li><li>ctrl+alt+t：try{}catch{}、if()等</li></ul><h3 id="eclipse"><a href="#eclipse" class="headerlink" title="eclipse"></a>eclipse</h3><ul><li>快速run程序：shift+alt+x</li><li>快速get和set：alt+shift+s</li></ul><h3 id="Sublime-Text3"><a href="#Sublime-Text3" class="headerlink" title="Sublime Text3"></a>Sublime Text3</h3><ul><li>添加html注释：ctrl+？</li><li>删除一行：ctrl+x</li><li>ctrl+enter在当前行下面新增一行，跳至该行</li><li>ctrl+shift+enter在当前行上面增加一行并跳至该行</li><li>ctrl+shift+↑/↓移动当前行</li><li>复制当前行，并插入下一行：ctrl+shift+d</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;IDEA&quot;&gt;&lt;a href=&quot;#IDEA&quot; class=&quot;headerlink&quot; title=&quot;IDEA&quot;&gt;&lt;/a&gt;IDEA&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ctrl+enter在当前行下面新增一行，跳至该行&lt;/li&gt;
&lt;li&gt;shift+enter在当前行上面增加一行
      
    
    </summary>
    
      <category term="工具的使用" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Java反射机制</title>
    <link href="http://yoursite.com/2018/10/16/Java%E5%8F%8D%E5%B0%84/"/>
    <id>http://yoursite.com/2018/10/16/Java反射/</id>
    <published>2018-10-16T09:45:11.422Z</published>
    <updated>2018-11-06T00:23:43.550Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java反射机制"><a href="#Java反射机制" class="headerlink" title="Java反射机制"></a>Java反射机制</h1><p>Java反射机制是在运行状态中，对于任意一个类，都能知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能成为Java语言的反射机制。</p><p>用来编写一些通用性较高的代码或者框架的时候使用。</p><p>Java反射对象：</p><ul><li>Class：Class类的实例表示正在运行的Java应用程序中的类和接口</li><li>Constructor：类的单个构造方法的信息以及对它的访问权限</li><li>Field：提供有关类或接口的单个字段的信息，以及对它的动态访问权限</li><li>Method：提供关于类或接口上单独某个方法的信息</li></ul><p><img src="/images/Java反射/Java反射.png" alt="Java反射"></p><h2 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h2><p><img src="/images/Java反射/Java反射1.png" alt="Java反射"></p><p><strong>下面是通过第三种方法获得有参或者无参的构造方法<br>要注意的是Class.forName()需要抛出异常，而且其中的字符串是类的所在位置，注意它的写法“.”。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import java.lang.reflect.Constructor;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">public class ConstructorTest &#123;</span><br><span class="line">@Test</span><br><span class="line">/**</span><br><span class="line"> * 获得无参数的构造方法</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public void demo1() throws Exception &#123;</span><br><span class="line">Class class1 = Class.forName(&quot;reflect.Person&quot;);</span><br><span class="line">Constructor c = class1.getConstructor();</span><br><span class="line">//相当于Person person = new Person();</span><br><span class="line">Person person = (Person) c.newInstance();</span><br><span class="line">person.eat();</span><br><span class="line">&#125;</span><br><span class="line">@Test</span><br><span class="line">/*</span><br><span class="line"> * 获得有参数的构造方法</span><br><span class="line"> */</span><br><span class="line">public void demo2() throws Exception&#123;</span><br><span class="line">Class class2 = Class.forName(&quot;reflect.Person&quot;);</span><br><span class="line">Constructor constructor = class2.getConstructor(String.class,String.class);</span><br><span class="line">//Person person = new Person(&quot;张三&quot;,&quot;男&quot;);</span><br><span class="line">Person person = (Person) constructor.newInstance(&quot;张三&quot;,&quot;男&quot;);</span><br><span class="line">System.out.println(person);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Person类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">public class Person &#123;</span><br><span class="line"></span><br><span class="line">private String name;</span><br><span class="line">private String sex;</span><br><span class="line"></span><br><span class="line">public Person() &#123;</span><br><span class="line">super();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Person(String name, String sex) &#123;</span><br><span class="line">this.name = name;</span><br><span class="line">this.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getName() &#123;</span><br><span class="line">return name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setName(String name) &#123;</span><br><span class="line">this.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getSex() &#123;</span><br><span class="line">return sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setSex(String sex) &#123;</span><br><span class="line">this.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void eat() &#123;</span><br><span class="line">System.out.println(&quot;吃饭&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String toString() &#123;</span><br><span class="line">return &quot;Person [name=&quot; + name + &quot;, sex=&quot; + sex + &quot;]&quot;;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Constructor类"><a href="#Constructor类" class="headerlink" title="Constructor类"></a>Constructor类</h2><p><img src="/images/Java反射/Java反射2.png" alt="Java反射"><br>c是字节码文件。getDeclaredFields()获得私有的。</p><p>反射Constructor类的步骤：</p><ol><li>先加载字节码文件(Class.forName(“”))</li><li>获得构造方法(class1.getConstructor(“”)/class1.getConstructors()获得所有构造方法)</li><li>通过构造方法对象调用newInstance()方法实例化对象</li><li>此对象可以调用它的方法</li></ol><h2 id="Field类"><a href="#Field类" class="headerlink" title="Field类"></a>Field类</h2><p><img src="/images/Java反射/Java反射3.png" alt="Java反射"></p><p>FieldTest源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">package reflect;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">public class FieldTest &#123;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void demo() throws Exception&#123;</span><br><span class="line">Class c = Class.forName(&quot;reflect.Person&quot;);</span><br><span class="line">Field field = c.getField(&quot;age&quot;);</span><br><span class="line">Person person = (Person)c.newInstance();</span><br><span class="line">field.set(person, 20);</span><br><span class="line"></span><br><span class="line">Object object = field.get(person);</span><br><span class="line">System.out.println(object);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void demo2() throws Exception&#123;</span><br><span class="line">Class c = Class.forName(&quot;reflect.Person&quot;);</span><br><span class="line">Field field = c.getDeclaredField(&quot;name&quot;);</span><br><span class="line">Person person = (Person)c.newInstance();</span><br><span class="line">//私有属性要多一个设置访问权限</span><br><span class="line">field.setAccessible(true);</span><br><span class="line">field.set(person, &quot;卡兹克&quot;);</span><br><span class="line"></span><br><span class="line">Object object = field.get(person);</span><br><span class="line">System.out.println(object);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>反射Filed类的步骤（包括私有变量）：</p><ol><li>先加载字节码文件(Class.forName(“”))</li><li>通过字节码文件获得Field对象(class1.getField(“”)/class1.getDeclaredField(“”)获得私有/class1.getFields()获得所有成员变量)</li><li>如果是私有变量需要添加这一步：Field对象调用setAccessible(boolean)设置是否可以访问</li><li>通过字节码文件调用newInstance()方法实例化对象</li><li>Field对象调用set(obj,value)方法来设置变量值。这里的obj参数就是上面实例化的对象</li><li>Field对象调用get(obj)方法来获取变量值。这里的obj参数就是上面实例化的对象</li></ol><h2 id="Method类"><a href="#Method类" class="headerlink" title="Method类"></a>Method类</h2><p><img src="/images/Java反射/Java反射4.png" alt="Java反射"></p><p>MethodTest源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">package reflect;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line">public class MethodTest &#123;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">//测试公有方法</span><br><span class="line">public void demo1() throws Exception &#123;</span><br><span class="line">Class class1 = Class.forName(&quot;reflect.Person&quot;);</span><br><span class="line">//通过字节码文件实例化对象</span><br><span class="line">Person person = (Person)class1.newInstance();</span><br><span class="line">//获得公有的方法</span><br><span class="line">Method method = class1.getMethod(&quot;eat&quot;);</span><br><span class="line">//执行该方法</span><br><span class="line">method.invoke(person); //Person.eat();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">//测试私有方法</span><br><span class="line">@Test</span><br><span class="line">public void demo2() throws Exception&#123;</span><br><span class="line">Class class1 = Class.forName(&quot;reflect.Person&quot;);</span><br><span class="line">//实例化</span><br><span class="line">Person person = (Person)class1.newInstance();</span><br><span class="line">//获得私有方法</span><br><span class="line">Method method = class1.getDeclaredMethod(&quot;lashi&quot;);</span><br><span class="line">//设置私有属性的访问权限</span><br><span class="line">method.setAccessible(true);</span><br><span class="line">//执行该方法</span><br><span class="line">method.invoke(person);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">//测试带参数的私有方法</span><br><span class="line">public void demo3() throws Exception&#123;</span><br><span class="line">Class class1 = Class.forName(&quot;reflect.Person&quot;);</span><br><span class="line">//实例化</span><br><span class="line">Person person = (Person)class1.newInstance();</span><br><span class="line">//获得带参数的方法，并指定参数类型的class</span><br><span class="line">Method method = class1.getDeclaredMethod(&quot;sayHello&quot;,String.class);</span><br><span class="line">//设置方法访问权限</span><br><span class="line">method.setAccessible(true);</span><br><span class="line">//执行方法</span><br><span class="line">System.out.println(method.invoke(person, &quot;Jack&quot;));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>反射Method类的步骤：</p><ol><li>先加载字节码文件(Class.forName(“”))</li><li>实例化对象：class1.newInstance()</li><li>获得Method类对象，通过getMethod(“”)/getDeclaredMethod(“”)</li><li>如果方法是私有的必须要设置访问权限：method.setAccessible(true)</li><li>方法执行，method.invoke(person,参数);这里的invoke方法返回的是一个obj对象</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java反射机制&quot;&gt;&lt;a href=&quot;#Java反射机制&quot; class=&quot;headerlink&quot; title=&quot;Java反射机制&quot;&gt;&lt;/a&gt;Java反射机制&lt;/h1&gt;&lt;p&gt;Java反射机制是在运行状态中，对于任意一个类，都能知道这个类的所有属性和方法；对于任意一个
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>HTML</title>
    <link href="http://yoursite.com/2018/10/15/HTML/"/>
    <id>http://yoursite.com/2018/10/15/HTML/</id>
    <published>2018-10-15T11:11:56.007Z</published>
    <updated>2018-10-18T04:11:34.674Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><p>HypeerText Markup Language:超文本 标记 语言</p><p><code>&lt;html&gt;&lt;/html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;</code></p><p><img src="/images/html/html1.png" alt=""></p><h2 id="一个简单的html表单"><a href="#一个简单的html表单" class="headerlink" title="一个简单的html表单"></a>一个简单的html表单</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>表单<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"这是一个输入框"</span> <span class="attr">maxlength</span>=<span class="string">"10"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"我是默认密码"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">checked</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">"gender"</span>&gt;</span>男</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span>&gt;</span>女</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span>电影</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">checked</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>音乐</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>美术</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"我是按钮"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"date"</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"color"</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"range"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">max</span>=<span class="string">"5"</span> <span class="attr">min</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"url"</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">multiple</span>=<span class="string">"multiple"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>葡萄<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">textarea&#123;</span></span><br><span class="line"><span class="undefined">resize: none;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">"12"</span> <span class="attr">rows</span>=<span class="string">"2"</span>&gt;</span>我是一段文本<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如下是当前html的表现：</p><p><img src="/images/html/html1-1.png" alt="html1-1"></p><p>如下是表单<code>&lt;form&gt;</code>中的属性使用：<img src="/images/html/html1-2.png" alt="html1-2"></p><p>如下是html表格：</p><p><img src="/images/html/html1-3.png" alt="html1-3"></p><p>html总结：</p><p><img src="/images/html/html1-4.png" alt="html1-4"></p><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><p>Cascading Style Sheets:层叠样式表<br>可以让相同的一个页面在不同的浏览器中呈现相同的样式。</p><p>为什么使用CSS？</p><ul><li>样式定义如何显示HTML元素</li><li>是为了解决内容与表现分离的问题<ul><li>内容主要指HTML中的元素</li><li>表现是内容在浏览器中呈现的样式</li></ul></li></ul><h2 id="CSS基础语法"><a href="#CSS基础语法" class="headerlink" title="CSS基础语法"></a>CSS基础语法</h2><ul><li>background-color 样式属性</li><li>: 操作符</li><li>; 分隔符</li><li>#FFFFFF 样式值</li></ul><p>CSS内联级别高于外联级别</p><h2 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h2><ul><li>ID选择器</li><li>元素选择器</li><li>类选择器</li><li>属性选择器</li></ul><p>一般选用属性选择器和类选择器即span和.class<br>还有三个子元素选择器：</p><ul><li>A E 后代选择器</li><li>A+E 兄弟选择器</li><li>A&gt;E 子元素选择器</li></ul><p>伪类</p><ul><li>:link 向未被访问的链接添加样式</li><li>:hover 当鼠标悬浮在元素上方时，向元素添加样式</li><li>:active 向被激活的元素添加样式</li><li>:visited 向已被访问的链接添加样式</li></ul><p>伪元素(添加两个虚拟的子元素)</p><ul><li>::before</li><li>::after</li></ul><p>选择器的优先级别：</p><ul><li>类选择器的优先级别高于元素选择器</li><li>id选择器的优先级别高于类选择器和元素选择器</li><li>内联样式&gt;id选择器&gt;类选择器&gt;元素选择器</li><li>带有!import是提高至最高级</li></ul><h2 id="CSS样式"><a href="#CSS样式" class="headerlink" title="CSS样式"></a>CSS样式</h2><p>背景<br><img src="/images/css/css样式.png" alt="css样式"><br>文本<br><img src="/images/css/css样式1.png" alt="css样式"><br>字体<br><img src="/images/css/css样式2.png" alt="css样式"><br>列表<br><img src="/images/css/css样式3.png" alt="css样式"><br>表格<br><img src="/images/css/css样式4.png" alt="css样式"><br>如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;表格&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        table,th,td &#123;</span><br><span class="line">            border: 1px lightgray solid;</span><br><span class="line">            border-collapse: collapse;</span><br><span class="line">        &#125;</span><br><span class="line">        table&#123;</span><br><span class="line">            width: 80%;</span><br><span class="line">            margin: 0px auto;</span><br><span class="line">        &#125;</span><br><span class="line">        th,td&#123;</span><br><span class="line">            padding: 5px;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line">        th&#123;</span><br><span class="line">            background-color: lightcoral;</span><br><span class="line">            color: white;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;英雄名称&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;定位&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;价格&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;放逐之刃&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;Top&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;6300&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;狂战士&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;Jungle&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;1350&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;圣枪游侠&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;ADC&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;6300&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h2 id="CSS布局"><a href="#CSS布局" class="headerlink" title="CSS布局"></a>CSS布局</h2><p>两行三列布局：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;两行三列布局&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        html,body&#123;</span><br><span class="line">            margin: 0px;</span><br><span class="line">        &#125;</span><br><span class="line">        header&#123;</span><br><span class="line">            background-color: lightcoral;</span><br><span class="line">            height: 150px;</span><br><span class="line">        &#125;</span><br><span class="line">        #container&#123;</span><br><span class="line">            background-color: lightgray;</span><br><span class="line">            height: 450px;</span><br><span class="line">        &#125;</span><br><span class="line">        nav&#123;</span><br><span class="line">            background-color: darkgreen;</span><br><span class="line">            height: 100%;</span><br><span class="line">            width: 150px;</span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line">        aside&#123;</span><br><span class="line">            background-color: blue;</span><br><span class="line">            height: 100%;</span><br><span class="line">            width: 150px;</span><br><span class="line">            float: right;</span><br><span class="line">        &#125;</span><br><span class="line">        article&#123;</span><br><span class="line">            background-color: aqua;</span><br><span class="line">            height: 100%;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;header&gt;&lt;/header&gt;</span><br><span class="line">&lt;div id=&quot;container&quot;&gt;</span><br><span class="line">    &lt;nav&gt;&lt;/nav&gt;</span><br><span class="line">    &lt;aside&gt;&lt;/aside&gt;</span><br><span class="line">    &lt;article&gt;&lt;/article&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>三行两列布局：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;三行两列布局&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        html,body&#123;</span><br><span class="line">            margin: 0px;</span><br><span class="line">        &#125;</span><br><span class="line">        header&#123;</span><br><span class="line">            background-color: lightcoral;</span><br><span class="line">            height: 150px;</span><br><span class="line">        &#125;</span><br><span class="line">        #container&#123;</span><br><span class="line">            background-color: lightgray;</span><br><span class="line">            height: 450px;</span><br><span class="line">        &#125;</span><br><span class="line">        nav&#123;</span><br><span class="line">            background-color: darkgreen;</span><br><span class="line">            height: 100%;</span><br><span class="line">            width: 150px;</span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line">        article&#123;</span><br><span class="line">            background-color: aqua;</span><br><span class="line">            height: 100%;</span><br><span class="line">            margin-left: 150px;</span><br><span class="line">        &#125;</span><br><span class="line">        footer&#123;</span><br><span class="line">            background-color: firebrick;</span><br><span class="line">            height: 50px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;header&gt;&lt;/header&gt;</span><br><span class="line">&lt;div id=&quot;container&quot;&gt;</span><br><span class="line">    &lt;nav&gt;&lt;/nav&gt;</span><br><span class="line">    &lt;article&gt;&lt;/article&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;footer&gt;&lt;/footer&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h2 id="CSS盒子模型"><a href="#CSS盒子模型" class="headerlink" title="CSS盒子模型"></a>CSS盒子模型</h2><p><img src="/images/css/css盒子模型.png" alt="css盒子模型"><br><img src="/images/css/css盒子模型1.png" alt="css盒子模型"><br>padding: top right bottom left;<br><img src="/images/css/css盒子模型2.png" alt="css盒子模型">  </p><h2 id="CSS中的float"><a href="#CSS中的float" class="headerlink" title="CSS中的float"></a>CSS中的float</h2><p>float中的四个参数：</p><ul><li>float: left</li><li>float: right</li><li>float: none</li><li>float: inherit</li></ul><h2 id="float属性实现文本环绕效果"><a href="#float属性实现文本环绕效果" class="headerlink" title="float属性实现文本环绕效果"></a>float属性实现文本环绕效果</h2><h2 id="清除浮动的解决办法"><a href="#清除浮动的解决办法" class="headerlink" title="清除浮动的解决办法"></a>清除浮动的解决办法</h2><p><img src="/images/css/css浮动.png" alt=""></p><h2 id="CSS的position属性"><a href="#CSS的position属性" class="headerlink" title="CSS的position属性"></a>CSS的position属性</h2><ul><li>static</li><li>relative</li><li>absolute</li><li>fixed</li><li>sticky</li></ul><h3 id="static静态定位"><a href="#static静态定位" class="headerlink" title="static静态定位"></a>static静态定位</h3><p><img src="/images/css/css-position.png" alt=""></p><h3 id="relative相对定位"><a href="#relative相对定位" class="headerlink" title="relative相对定位"></a>relative相对定位</h3><p><img src="/images/css/css-position1.png" alt=""></p><h3 id="absolute绝对定位"><a href="#absolute绝对定位" class="headerlink" title="absolute绝对定位"></a>absolute绝对定位</h3><p>相对于最近的祖先元素定位（没有就相对于body）。<br><img src="/images/css/css-position2.png" alt=""></p><h3 id="fixed固定定位"><a href="#fixed固定定位" class="headerlink" title="fixed固定定位"></a>fixed固定定位</h3><p>不会随着视口滚动而滚动。继承absolute特点。<br>与absolute绝对定位的区别就在于相对谁做绝对滚动。<br>例如：一些小说网站上，右下角的贪玩蓝月广告。</p><h3 id="sticky磁贴定位"><a href="#sticky磁贴定位" class="headerlink" title="sticky磁贴定位"></a>sticky磁贴定位</h3><p><img src="/images/css/css-position3.png" alt=""></p><p>一个最左侧fix固定定位导航栏例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;position&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">*&#123;</span><br><span class="line">padding: 0;</span><br><span class="line">margin: 0;</span><br><span class="line">&#125;</span><br><span class="line">.page&#123;</span><br><span class="line">width: 100%;</span><br><span class="line">height: 1080px;</span><br><span class="line">background: url(&quot;./images/background.png&quot;) center top no-repeat;</span><br><span class="line">&#125;</span><br><span class="line">.nav&#123;</span><br><span class="line">width: 160px;</span><br><span class="line">height: auto;</span><br><span class="line">position: fixed;</span><br><span class="line">left: 0;</span><br><span class="line">top: 50%;</span><br><span class="line">margin-top: ;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">.nav-li&#123;</span><br><span class="line">width: 160px;</span><br><span class="line">height: auto;</span><br><span class="line">border-bottom: 1px solid #FFF;</span><br><span class="line">background: #333;</span><br><span class="line">text-align: center;</span><br><span class="line">line-height: 40px;</span><br><span class="line">color: #FFF;</span><br><span class="line">cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line">.nav-li ul&#123;</span><br><span class="line">width: 160px;</span><br><span class="line">height: auto;</span><br><span class="line">background: #FFF;</span><br><span class="line">display: none;</span><br><span class="line">&#125;</span><br><span class="line">.nav-li ul li&#123;</span><br><span class="line">width: 160px;</span><br><span class="line">height: 40px;</span><br><span class="line">border-bottom: 1px dashed #666;</span><br><span class="line">color: #333;</span><br><span class="line">text-align: center;</span><br><span class="line">line-height: 40px;</span><br><span class="line">position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.nav-li ul li:hover .list-3&#123;</span><br><span class="line">display: block;</span><br><span class="line">&#125;</span><br><span class="line">.tit&#123;</span><br><span class="line">width: 160px;</span><br><span class="line">height: 40px;</span><br><span class="line">&#125;</span><br><span class="line">.nav-li:hover ul&#123;</span><br><span class="line">display: block;</span><br><span class="line">&#125;</span><br><span class="line">.list-3&#123;</span><br><span class="line">width: 160px;</span><br><span class="line">height: auto;</span><br><span class="line">position: absolute;</span><br><span class="line">left: 150px;</span><br><span class="line">top: 0px;</span><br><span class="line">display: none;</span><br><span class="line">&#125;</span><br><span class="line">.list-3Dom&#123;</span><br><span class="line">width: 160px;</span><br><span class="line">height: 40px;</span><br><span class="line">background: #444;</span><br><span class="line">border-bottom: 1px solid #FFF;</span><br><span class="line">text-align: center;</span><br><span class="line">line-height: 40px;</span><br><span class="line">color: #FFF;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;page&quot;&gt;</span><br><span class="line">&lt;div class=&quot;nav&quot;&gt;</span><br><span class="line">&lt;div class=&quot;nav-li&quot;&gt;</span><br><span class="line">&lt;div class=&quot;tit&quot;&gt;这是一个导航&lt;/div&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">二级栏目</span><br><span class="line">&lt;div class=&quot;list-3&quot;&gt;</span><br><span class="line">&lt;div class=&quot;list-3Dom&quot;&gt;</span><br><span class="line">三级栏目 </span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;list-3Dom&quot;&gt;</span><br><span class="line">三级栏目 </span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;list-3Dom&quot;&gt;</span><br><span class="line">三级栏目 </span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">二级栏目</span><br><span class="line">&lt;div class=&quot;list-3&quot;&gt;</span><br><span class="line">&lt;div class=&quot;list-3Dom&quot;&gt;</span><br><span class="line">三级栏目 </span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;list-3Dom&quot;&gt;</span><br><span class="line">三级栏目 </span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;list-3Dom&quot;&gt;</span><br><span class="line">三级栏目 </span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">二级栏目</span><br><span class="line">&lt;div class=&quot;list-3&quot;&gt;</span><br><span class="line">&lt;div class=&quot;list-3Dom&quot;&gt;</span><br><span class="line">三级栏目 </span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;list-3Dom&quot;&gt;</span><br><span class="line">三级栏目 </span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;list-3Dom&quot;&gt;</span><br><span class="line">三级栏目 </span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;nav-li&quot;&gt;</span><br><span class="line">&lt;div class=&quot;tit&quot;&gt;这是一个导航&lt;/div&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">二级栏目</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">二级栏目</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">二级栏目</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;nav-li&quot;&gt;</span><br><span class="line">&lt;div class=&quot;tit&quot;&gt;这是一个导航&lt;/div&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">二级栏目</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">二级栏目</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">二级栏目</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;nav-li&quot;&gt;</span><br><span class="line">&lt;div class=&quot;tit&quot;&gt;这是一个导航&lt;/div&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">二级栏目</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">二级栏目</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">二级栏目</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;nav-li&quot;&gt;</span><br><span class="line">&lt;div class=&quot;tit&quot;&gt;这是一个导航&lt;/div&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">二级栏目</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">二级栏目</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">二级栏目</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h1&gt;&lt;p&gt;HypeerText Markup Language:超文本 标记 语言&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;html&amp;gt;
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>编程基础笔记（一）</title>
    <link href="http://yoursite.com/2018/10/13/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B01/"/>
    <id>http://yoursite.com/2018/10/13/编程基础笔记1/</id>
    <published>2018-10-13T13:25:21.162Z</published>
    <updated>2018-10-29T03:42:58.501Z</updated>
    
    <content type="html"><![CDATA[<h2 id="byte类型取值范围为什么是127到-128？"><a href="#byte类型取值范围为什么是127到-128？" class="headerlink" title="byte类型取值范围为什么是127到-128？"></a>byte类型取值范围为什么是127到-128？</h2><p>因为第一位是符号位，所以二进制数0111 1111是表示最大的正数：127；计算机中存储的是补码，正数的补码（反码）还是原码，0111 1111 。<br>既然有127那么就有-127。 -127的原码是1111 1111，负数的补码是原码取反(符号位不取反)加1。 -127的原码 1111 1111，反码 1000 0000 ，补码 1000 0001。</p><p>下面解释-128从哪来的:</p><p>-0的原码 1000 0000，反码 1111 1111 ，补码: 反码加1以后就是1000 0000。 +0的原码 0000 0000 反码补码都0000 0000 。因为日常生活中没有-0， 所以规定0在计算机中表示为0000 0000。</p><p>以0开头的补码已经全部使用，因为正数原码补码都一样，所以0000 0000到0111 1111补码已经全部占用，表示0~127。<br>以1开头的原码，即补码1000 0001到补码1111 1111是表示-127到-1，</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">-1</th><th style="text-align:center">-127</th></tr></thead><tbody><tr><td style="text-align:center">原码</td><td style="text-align:center">1000 0001</td><td style="text-align:center">1111 1111</td></tr><tr><td style="text-align:center">补码</td><td style="text-align:center">1111 1111</td><td style="text-align:center">1000 0001</td></tr></tbody></table><p>这时还剩下一串补码 1000 0000就把这串码表示成-128，<br>也可以这样想，127……1存在，所以也有相应的，-1……-127存在，除去0，补码还剩一串 1000 0000所以规定为-128。</p><h2 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h2><h3 id="访问控制修饰符"><a href="#访问控制修饰符" class="headerlink" title="访问控制修饰符"></a>访问控制修饰符</h3><p><img src="G:\blog\source\images\访问控制修饰符.png" alt="访问控制修饰符"></p><p>即访问权限排序：public&gt;protected&gt;default&gt;private</p><h3 id="Java运算符"><a href="#Java运算符" class="headerlink" title="Java运算符"></a>Java运算符</h3><h4 id="算术运算符：例如数学中的运算符，它和数学中的作用是一样的。不过它多了一组-和–。"><a href="#算术运算符：例如数学中的运算符，它和数学中的作用是一样的。不过它多了一组-和–。" class="headerlink" title="算术运算符：例如数学中的运算符，它和数学中的作用是一样的。不过它多了一组++和–。"></a>算术运算符：例如数学中的运算符，它和数学中的作用是一样的。不过它多了一组++和–。</h4><p>例如：下面的Test类运算结果是：a++ = 10;a– = 11;d++ = 25;++d = 27;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">     <span class="keyword">int</span> d = <span class="number">25</span>;</span><br><span class="line">     System.out.println(<span class="string">"a++   = "</span> +  (a++) );</span><br><span class="line">     System.out.println(<span class="string">"a--   = "</span> +  (a--) );</span><br><span class="line">     <span class="comment">// 查看  d++ 与 ++d 的不同</span></span><br><span class="line">     System.out.println(<span class="string">"d++   = "</span> +  (d++) );</span><br><span class="line">     System.out.println(<span class="string">"++d   = "</span> +  (++d) );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由此例能看出，++与–是一种运算，在输出语句中，它的运算优先级和++与–所在的位置前后有关。当运算符在前，就先对这个数进行操作再进行输出语句；运算符在后，就先运行输出语句，再计算。而且a++与++a的运行结果都是a+1。</p><p>例如：selfAddMinus类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">selfAddMinus</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">5</span>;<span class="comment">//定义一个变量；</span></span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">2</span>*++a;</span><br><span class="line">        <span class="keyword">int</span> y = <span class="number">2</span>*b++;</span><br><span class="line">        System.out.println(<span class="string">"自增运算符前缀运算后a="</span>+a+<span class="string">",x="</span>+x);</span><br><span class="line">        System.out.println(<span class="string">"自增运算符后缀运算后b="</span>+b+<span class="string">",y="</span>+y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是a=6,x=12;b=6,y=10;</p><h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h4><p>!= ; &gt;= ; &lt;=;</p><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><p>+= ：他把左操作数和右操作数相加赋值给左操作数。c+=a等价于c=c+a。-=、*=、/=、&lt;&lt;=、&gt;&gt;=、&amp;=、^=、|= 都是类似的，左操作数在前，右操作数在后，操作符在中间。不过这里的&gt;&gt;=和&lt;&lt;=是箭尖指的方向就是这个数的十六进制中每一位的位移方向。</p><h3 id="Java循环"><a href="#Java循环" class="headerlink" title="Java循环"></a>Java循环</h3><h4 id="do…while循环"><a href="#do…while循环" class="headerlink" title="do…while循环"></a>do…while循环</h4><p>它于while的区别是，do…while语句能在即使条件不满足的情况下，也执行一次。</p><h4 id="Java增强for循环"><a href="#Java增强for循环" class="headerlink" title="Java增强for循环"></a>Java增强for循环</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(声明语句 : 表达式)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//代码句子</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明语句：声明新的局部变量，该变量的类型必须和数组元素的类型匹配。它的限定域在循环代码块，它的值和此时数组元素的值相同。</p><p>表达式：是要访问的数组名，或者是能返回数组的方法。</p><h4 id="continue关键字"><a href="#continue关键字" class="headerlink" title="continue关键字"></a>continue关键字</h4><p>在do..while语句中，执行continue就跳转到while判断语句；</p><p>在for循环中，执行continue就跳转到更新语句。</p><h2 id="数据库初识"><a href="#数据库初识" class="headerlink" title="数据库初识"></a>数据库初识</h2><h3 id="数据库表可以使用什么赋予别名？"><a href="#数据库表可以使用什么赋予别名？" class="headerlink" title="数据库表可以使用什么赋予别名？"></a>数据库表可以使用什么赋予别名？</h3><ul><li>tbl_name alias_name</li><li>tbl_name AS alias_name</li></ul><h3 id="有关预编译SQL的说法错误的是哪一个？（A）"><a href="#有关预编译SQL的说法错误的是哪一个？（A）" class="headerlink" title="有关预编译SQL的说法错误的是哪一个？（A）"></a>有关预编译SQL的说法错误的是哪一个？（A）</h3><p>A:预编译SQL的占位符既可以代替数据库，也可以替代表达式的数据，甚至是子查询语句</p><p>B:预编译SQL可以被PreparedStatement反复执行</p><p>C:预编译SQL语句在PreparedStatement对象创建之后就被传递给数据库解析，之后PreparedStatement执行预编译的时候，其实传递给数据库的只有占位符的参数</p><p>D:预编译SQL的安全性好，可以低于数据库脚本的注入攻击，而这是Statement不具备的</p><h3 id="不是MySql的退出命令的是？（C）"><a href="#不是MySql的退出命令的是？（C）" class="headerlink" title="不是MySql的退出命令的是？（C）"></a>不是MySql的退出命令的是？（C）</h3><p>A: mysql &gt; quit;</p><p>B: mysql &gt; \q;</p><p>C: mysql &gt; die;</p><p>D: mysql &gt; exit;</p><h3 id="以下关于数据库连接池的说法错误的是？（B）"><a href="#以下关于数据库连接池的说法错误的是？（B）" class="headerlink" title="以下关于数据库连接池的说法错误的是？（B）"></a>以下关于数据库连接池的说法错误的是？（B）</h3><p>A: 不适用数据库连接池，每次访问都需要创建连接，极大地浪费数据库资源，造成数据库服务器的内存溢出</p><p>B: 使用数据库连接池相对于传统方式并不会提高系统的执行效率</p><p>C: 数据库连接池是创建和管理连接欸数据库缓冲池的技术，这些连接准备好被任何需要使用它们的线程使用</p><p>D: C3P0也是数据库连接池的一种</p><h3 id="如何创建C3P0的数据库连接池对象？"><a href="#如何创建C3P0的数据库连接池对象？" class="headerlink" title="如何创建C3P0的数据库连接池对象？"></a>如何创建C3P0的数据库连接池对象？</h3><p>ComboPooledDataSource</p><h3 id="有关Connection描述错误的是？（B）"><a href="#有关Connection描述错误的是？（B）" class="headerlink" title="有关Connection描述错误的是？（B）"></a>有关Connection描述错误的是？（B）</h3><p>A: 只有MySQL数据库的JDBC程序需要创建Connection对象，其他数据库的JDBC程序不需要创建Connection对象就可以执行</p><p>B: Connection是Java程序与数据库建立的连接对象，这个对象只能用来连接数据库，不能执行SQL语句</p><p>C: JDBC的数据库事务控制要靠Connection对象完成</p><p>D: Connection对象使用完毕后要及时关闭，否则会对数据库造成负担</p><h3 id="以下关于Class对象说法正确的是？（B）"><a href="#以下关于Class对象说法正确的是？（B）" class="headerlink" title="以下关于Class对象说法正确的是？（B）"></a>以下关于Class对象说法正确的是？（B）</h3><p>A: 类的构造方法编译后可以通过class对象获取</p><p>B: 类的字节码文件被加载到内存中所形成的一个对象，称为Class对象</p><p>C: 类中的属性和普通方法编译为字节码后可以通过class对象获取</p><p>D: 类文件就可以成为class对象</p><h3 id="包含事务控制方法setAutoCommit-commit-rollback的类是Connection"><a href="#包含事务控制方法setAutoCommit-commit-rollback的类是Connection" class="headerlink" title="包含事务控制方法setAutoCommit,commit,rollback的类是Connection"></a>包含事务控制方法setAutoCommit,commit,rollback的类是Connection</h3><h3 id="在测试方法中，如果某个方法要优先执行，需要使用-Before注解"><a href="#在测试方法中，如果某个方法要优先执行，需要使用-Before注解" class="headerlink" title="在测试方法中，如果某个方法要优先执行，需要使用@Before注解"></a>在测试方法中，如果某个方法要优先执行，需要使用@Before注解</h3><p>## </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;byte类型取值范围为什么是127到-128？&quot;&gt;&lt;a href=&quot;#byte类型取值范围为什么是127到-128？&quot; class=&quot;headerlink&quot; title=&quot;byte类型取值范围为什么是127到-128？&quot;&gt;&lt;/a&gt;byte类型取值范围为什么是127
      
    
    </summary>
    
      <category term="编程基础" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>IDEA使用技巧</title>
    <link href="http://yoursite.com/2018/10/12/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>http://yoursite.com/2018/10/12/IDEA使用技巧/</id>
    <published>2018-10-12T12:59:05.020Z</published>
    <updated>2018-10-26T04:12:11.348Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><p>搜索action：ctrl+shift+a</p><h2 id="定位代码"><a href="#定位代码" class="headerlink" title="定位代码"></a>定位代码</h2><ul><li>Alt+数字 :用来跳转例如project的窗口</li><li>文件之间跳转</li><li>Ctrl+N ： 快速搜索打开指定class</li><li>文件和编辑的跳转：Alt+1和esc</li><li>文件搜索：ctrl+shift+n</li><li>shift+f6：重构变量（名称）</li><li>抽取：<ul><li>抽取变量：ctrl+v</li><li>抽取静态变量：ctrl+c</li><li>抽取成员变量：ctrl+f</li><li>抽取函数：ctrl+alt+m</li></ul></li></ul><h2 id="IDEA添加方法注释"><a href="#IDEA添加方法注释" class="headerlink" title="IDEA添加方法注释"></a>IDEA添加方法注释</h2><ol><li>ctrl+shift+a搜索live temp；（带setting的）</li><li>在template text:中添加</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> *@Description $description$</span><br><span class="line">$param$</span><br><span class="line"> *@return $return$</span><br><span class="line"> **/</span><br></pre></td></tr></table></figure><ol start="3"><li>点击edit variables，在param中添加</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groovyScript(&quot;def result=&apos;&apos;; def params=\&quot;$&#123;_1&#125;\&quot;.replaceAll(&apos;[\\\\[|\\\\]|\\\\s]&apos;, &apos;&apos;).split(&apos;,&apos;).toList(); for(i = 0; i &lt; params.size(); i++) &#123;result+=&apos; * @param &apos; + params[i] + &apos;\\t&apos; + ((i &lt; params.size() - 1) ? &apos;\\n&apos; : &apos;&apos;)&#125;; return result&quot;, methodParameters())</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;快捷键&quot;&gt;&lt;a href=&quot;#快捷键&quot; class=&quot;headerlink&quot; title=&quot;快捷键&quot;&gt;&lt;/a&gt;快捷键&lt;/h1&gt;&lt;p&gt;搜索action：ctrl+shift+a&lt;/p&gt;
&lt;h2 id=&quot;定位代码&quot;&gt;&lt;a href=&quot;#定位代码&quot; class=&quot;hea
      
    
    </summary>
    
      <category term="工具的使用" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>淘宝电商项目</title>
    <link href="http://yoursite.com/2018/10/03/%E7%94%B5%E5%95%86%E5%AE%9E%E6%88%98/"/>
    <id>http://yoursite.com/2018/10/03/电商实战/</id>
    <published>2018-10-03T02:54:55.040Z</published>
    <updated>2018-10-04T02:34:05.571Z</updated>
    
    <content type="html"><![CDATA[<h2 id="nginx的安装"><a href="#nginx的安装" class="headerlink" title="nginx的安装"></a>nginx的安装</h2><p><a href="http://learning.happymmall.com/nginx/" target="_blank" rel="noopener">nginx安装包</a>   </p><h3 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h3><ol><li>配置nginx解压缩后目录下的conf目录中的nginx.conf：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">    #location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">============vhost===================</span><br><span class="line">include vhost/*.conf;</span><br><span class="line"></span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在conf目录下新建vhost文件夹，在文件夹中添加abc.com:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">server &#123; </span><br><span class="line">listen 80; </span><br><span class="line">autoindex off; </span><br><span class="line">server_name abc.com; </span><br><span class="line">access_log c:/access.log combined; </span><br><span class="line">index index.html index.htm index.jsp index.php; </span><br><span class="line">#error_page 404 /404.html;</span><br><span class="line">if ( $query_string ~* &quot;.*[\;&apos;\&lt;\&gt;].*&quot; )&#123; </span><br><span class="line">return 404; </span><br><span class="line">&#125; </span><br><span class="line">location ~ /(mmall_fe|mmall_admin_fe)/dist/view/* &#123;</span><br><span class="line">deny all; </span><br><span class="line">&#125; </span><br><span class="line">location / &#123; </span><br><span class="line">root C:\ftpfile\img; </span><br><span class="line">add_header Access-Control-Allow-Origin *;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>在<code>C:\Windows\System32\drivers\etc</code>中打开host，在最后一行添加<code>127.0.0.1 abc.com</code></li><li>在Windows PowerShell中进入nginx的目录下，使用<strong>.\nginx -t</strong>测试配置文件是否成功；再用<strong> tasklist /fi “imagename eq nginx.exe”</strong>查看已经开启的进程。</li><li>如果在浏览器中输入abc.com能看见nginx的提示成功页面；再输入abc.com/a.jpg出现404故障，就在进程管理中关闭所有nginx的进程。再重新开启nginx</li></ol><h2 id="数据库的创建"><a href="#数据库的创建" class="headerlink" title="数据库的创建"></a>数据库的创建</h2><p>创建mmall数据库，在库中有八张表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">create table mmall_user(</span><br><span class="line">id int(11) not null auto_increment comment &apos;用户表id&apos;,</span><br><span class="line">username varchar(50) not null comment &apos;用户名&apos;,</span><br><span class="line">password varchar(50) not null comment &apos;用户密码，MD5加密&apos;,</span><br><span class="line">email varchar(50) default null,</span><br><span class="line">phone varchar(20) default null,</span><br><span class="line">question varchar(100) default null comment &apos;找回密码问题&apos;,</span><br><span class="line">answer varchar(100) default null comment &apos;找回密码答案&apos;,</span><br><span class="line">role int(4) not null comment &apos;角色0-管理员，1-用户&apos;,</span><br><span class="line">create_time datetime not null comment &apos;创建时间&apos;,</span><br><span class="line">update_time datetime not null comment &apos;最后一次更新时间&apos;,</span><br><span class="line">primary key (id),</span><br><span class="line">unique key user_name_unique (username) using btree)</span><br><span class="line">ENGINE=InnoDB auto_increment=21 default charset=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create table mmall_category(</span><br><span class="line">id int(11) not null auto_increment comment &apos;类别id&apos;,</span><br><span class="line">parent_id int(11) default null comment &apos;父类别id当id=0时说明是根节点，一级类别&apos;,</span><br><span class="line">name varchar(50) default null comment &apos;类别名称&apos;,</span><br><span class="line">status tinyint(1) default &apos;1&apos; comment &apos;类别状态1-正常，2-已废弃&apos;,</span><br><span class="line">sort_order int(4) default null comment &apos;排序编号，同类展示顺序，数值相等则自然排序&apos;,</span><br><span class="line">create_time datetime default null comment &apos;创建时间&apos;,</span><br><span class="line">update_time datetime default null comment &apos;更新时间&apos;,</span><br><span class="line">primary key (id)</span><br><span class="line">)ENGINE=InnoDB AUTO_INCREMENT=100032 DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">create table mmall_product(</span><br><span class="line">id int(11) not null auto_increment comment &apos;商品id&apos;,</span><br><span class="line">category_id int(11) not null comment &apos;分类id，对应mmall_category表的主键&apos;,</span><br><span class="line">name varchar(100) not null comment &apos;商品名称&apos;,</span><br><span class="line">subtitle varchar(200) default null comment &apos;商品副标题&apos;,</span><br><span class="line">main_image varchar(500) default null comment &apos;产品主图，url相对地址&apos;,</span><br><span class="line">sub_image text comment &apos;图片地址，json格式，扩展用&apos;,</span><br><span class="line">detail text comment &apos;商品详情&apos;,</span><br><span class="line">price decimal(20,2) not null comment &apos;价格，单位-元，保留两位小数&apos;,</span><br><span class="line">stock int(11) not null comment &apos;库存数量&apos;,</span><br><span class="line">status int(6) default &apos;1&apos; comment &apos;商品状态，1-在售，2-下架，3-删除&apos;,</span><br><span class="line">create_time datetime default null comment &apos;创建时间&apos;,</span><br><span class="line">update_time datetime default null comment &apos;更新时间&apos;,</span><br><span class="line">primary key (id))ENGINE=InnoDB AUTO_INCREMENT=26 DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create table mmall_cart(</span><br><span class="line">id int(11) not null auto_increment,</span><br><span class="line">user_id int(11) not null,</span><br><span class="line">product_id int(11) default null comment &apos;商品id&apos;,</span><br><span class="line">quantity int(11) default null comment &apos;数量&apos;,</span><br><span class="line">checked int(11) default null comment &apos;是否选择，0=未选择，1-已选择&apos;,</span><br><span class="line">create_time datetime default null comment &apos;创建时间&apos;,</span><br><span class="line">update_time datetime default null comment &apos;更新时间&apos;,</span><br><span class="line">primary key (id),</span><br><span class="line">key user_id_index (user_id) using btree</span><br><span class="line">)ENGINE=InnoDB AUTO_INCREMENT=121 DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create table mmall_pay_info(</span><br><span class="line">id int(11) not null auto_increment,</span><br><span class="line">user_id int(11) default null comment &apos;用户id&apos;,</span><br><span class="line">order_no bigint(20) default null comment &apos;订单号&apos;,</span><br><span class="line">pay_platform int(10) default null comment &apos;支付平台，1-支付宝，2-微信&apos;,</span><br><span class="line">platform_number varchar(200) default null comment &apos;支付宝支付流水号&apos;,</span><br><span class="line">platform_status varchar(20) default null comment &apos;支付宝支付状态&apos;,</span><br><span class="line">create_time datetime default null comment &apos;创建时间&apos;,</span><br><span class="line">update_time datetime default null comment &apos;更新时间&apos;,</span><br><span class="line">primary key (id)</span><br><span class="line">)ENGINE=InnoDB AUTO_INCREMENT=53 DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create table mmall_order(</span><br><span class="line">id int(11) not null auto_increment comment &apos;订单id&apos;,</span><br><span class="line">order_no bigint(20) default null comment &apos;订单号&apos;,</span><br><span class="line">user_id int(11) default null comment &apos;用户id&apos;,</span><br><span class="line">shipping_id int(11) default null,</span><br><span class="line">payment decimal(20,2) default null comment &apos;实际付款金额，单位是元，保留两位小数&apos;,</span><br><span class="line">payment_type int(4) default null comment &apos;支付类型，1-在线支付&apos;,</span><br><span class="line">postage int(10) default null comment &apos;运费，单位是元&apos;,</span><br><span class="line">status int(10) default null comment &apos;订单状态：0-已取消，10-未付款，20-已付款，40-已发货，50-交易成功，60，交易关闭&apos;,</span><br><span class="line">payment_time datetime default null comment &apos;支付时间&apos;,</span><br><span class="line">send_time datetime default null comment &apos;发货时间&apos;,</span><br><span class="line">end_time datetime default null comment &apos;交易完成时间&apos;,</span><br><span class="line">close_time datetime default null comment &apos;交易关闭时间&apos;,</span><br><span class="line">create_time datetime default null comment &apos;创建时间&apos;,</span><br><span class="line">update_time datetime default null comment &apos;更新时间&apos;,</span><br><span class="line">primary key (id),</span><br><span class="line">unique key order_no_index (order_no) using btree</span><br><span class="line">)ENGINE=InnoDB AUTO_INCREMENT=103 DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create table mmall_order_item(</span><br><span class="line">id int(11) not null auto_increment comment &apos;订单子表id&apos;,</span><br><span class="line">user_id int(11) default null,</span><br><span class="line">order_no bigint(20) default null,</span><br><span class="line">product_id int(11) default null comment &apos;商品id&apos;,</span><br><span class="line">product_name varchar(100) default null comment &apos;商品名称&apos;,</span><br><span class="line">product_image varchar(500) default null comment &apos;商品图片地址&apos;,</span><br><span class="line">current_unit_price decimal(20,2) default null comment &apos;生成订单时的商品价格，单位是元，保留两位小数&apos;,</span><br><span class="line">quantity int(10) default null comment &apos;商品数量&apos;,</span><br><span class="line">total_price decimal(20,2) default null comment &apos;商品总价，单位是元，保留两位小数&apos;,</span><br><span class="line">create_time datetime default null comment &apos;创建时间&apos;,</span><br><span class="line">update_time datetime default null comment &apos;更新时间&apos;,</span><br><span class="line">primary key (id),</span><br><span class="line">key order_no_index (order_no) using btree,</span><br><span class="line">key order_no_user_id_index (user_id,order_no) using btree</span><br><span class="line">)ENGINE=InnoDB AUTO_INCREMENT=113 DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create table mmall_shipping(</span><br><span class="line">id int(11) not null auto_increment,</span><br><span class="line">user_id int(11) default null comment &apos;用户id&apos;,</span><br><span class="line">receiver_name varchar(20) default null comment &apos;收货人姓名&apos;,</span><br><span class="line">receiver_phone varchar(20) default null comment &apos;收货人固定电话&apos;,</span><br><span class="line">receiver_mobile varchar(20) default null comment &apos;收货人移动电话&apos;,</span><br><span class="line">receiver_province varchar(20) default null comment &apos;省份&apos;,</span><br><span class="line">receiver_city varchar(20) default null comment &apos;城市&apos;,</span><br><span class="line">receiver_district varchar(20) default null comment &apos;区/县&apos;,</span><br><span class="line">receiver_address varchar(200) default null comment &apos;详细地址&apos;,</span><br><span class="line">receiver_zip varchar(6) default null comment &apos;邮编&apos;,</span><br><span class="line">create_time datetime default null comment &apos;创建时间&apos;,</span><br><span class="line">update_time datetime default null comment &apos;更新时间&apos;,</span><br><span class="line">primary key (id)</span><br><span class="line">)ENGINE=InnoDB AUTO_INCREMENT=32 DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure><h2 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h2><h3 id="初始化maven项目"><a href="#初始化maven项目" class="headerlink" title="初始化maven项目"></a>初始化maven项目</h3><h4 id="配置tomcat："><a href="#配置tomcat：" class="headerlink" title="配置tomcat："></a>配置tomcat：</h4><ul><li>选择自己的tomcat目录，在选项Deployment下没有出现artifacts时，需要在IDEA的setting中找到<img src="https://img-blog.csdn.net/20171201231259167?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamlhbl9zaGVuZ190YW4=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="">添加。<blockquote><p>windows常用新建文件命令：<br>创建文件夹：md 文件夹名<br>创建空的文件：type nul&gt;文件名<br>创建有内容文件：echo “内容”&gt;文件名<br>查看文件内容：type +文件名<br>查看目录及子文件：dir<br>删除空文件夹：rd 文件夹名<br>删除文件及所有子文件：rd /s/q 文件夹名<br>删除文件：del 文件名</p></blockquote></li></ul><h4 id="项目的git基本配置："><a href="#项目的git基本配置：" class="headerlink" title="项目的git基本配置："></a>项目的git基本配置：</h4><p>新建.gitignore和README.md文件</p><blockquote><p>type nul&gt;.gitignore<br>type nul&gt;.README.md</p></blockquote><p>初始化仓库：</p><blockquote><p>git init</p></blockquote><p>查看仓库状态：</p><blockquote><p>git status</p></blockquote><p>添加进暂存区：</p><blockquote><p>git add .</p></blockquote><p>提交到版本库：</p><blockquote><p>git commit -m “first commit init project”</p></blockquote><p>关联到远程仓库：</p><blockquote><p>git remote add origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:Luotianhao343/mmall_learning.git</p></blockquote><p>查看分支：</p><blockquote><p>git branch</p></blockquote><p>推送：</p><blockquote><p>git pull</p></blockquote><p>强制推送到远程主分支：</p><blockquote><p>git push -u -f origin master</p></blockquote><p>查看远程分支;</p><blockquote><p>git branch -r</p></blockquote><p>创建分支：</p><blockquote><p>git checkout -b v1.0 origin/master</p></blockquote><p>将当前分支推送到远程同名目录下：</p><blockquote><p>git push origin HEAD -u</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;nginx的安装&quot;&gt;&lt;a href=&quot;#nginx的安装&quot; class=&quot;headerlink&quot; title=&quot;nginx的安装&quot;&gt;&lt;/a&gt;nginx的安装&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://learning.happymmall.com/nginx/
      
    
    </summary>
    
      <category term="项目实战" scheme="http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    
    
  </entry>
  
  <entry>
    <title>Java基础（十七）</title>
    <link href="http://yoursite.com/2018/09/25/9.26/"/>
    <id>http://yoursite.com/2018/09/25/9.26/</id>
    <published>2018-09-25T04:28:41.747Z</published>
    <updated>2018-10-02T01:24:28.391Z</updated>
    
    <content type="html"><![CDATA[<h1 id="千里之台起于累土"><a href="#千里之台起于累土" class="headerlink" title="千里之台起于累土"></a>千里之台起于累土</h1><h2 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h2><p>用来将文件或者文件夹封装成对象。<br>方便对文件与文件夹的属性信息进行操作。<br>File对象可以作为参数传递给流的构造函数。<br>流不能操作文件夹，不能操作文件属性。</p><p>File类是文件和文件夹的抽象形式。</p><h3 id="File类的常见方法"><a href="#File类的常见方法" class="headerlink" title="File类的常见方法"></a>File类的常见方法</h3><ol><li>创建<br>boolean createNewFile();在指定位置创建文件，如果该文件已经存在，则不创建，返回false。和输出流不一样，输出流对象一建立创建文件，就覆盖之前的文件。<br>boolean mkdir();在指定位置创建目录。<br>boolean mkdirs();创建多级目录。</li><li>删除<br>boolean delete();删除指定文件。<br>void deleteOnExit();在程序退出时删除指定文件</li><li>判断<br>boolean canExecute();文件是否能被执行<br>boolean exists();文件是否存在<br>isFile();isDirectory();isHidden();isAbsolute()<br>判断文件对象是否是文件或目录时，必须要先判断文件对象封装的内容是否存在。通过exists()判断。</li><li>获取信息<br>getName();<br>getPath();<br>getParent();该方法返回绝对路径下的父目录。如果获取的是相对路径，返回null。如果相对路径中有上一层目录，该目录就是返回结果。<br>getAbsolutePath();<br>lastModified();返回此抽象路径名指定文件最后一次被修改的时间。   </li></ol><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>函数自身调用自身，这种表现形式称为递归。<br>递归使用注意：</p><ul><li>注意限定</li></ul><p>看递归算法：现有一个方法体中调用自身方法体；开始，传入参数，判断是否满足自定义的条件；调用自身方法体，开始执行一个新的方法体；在新的方法体中，继续判断是否满足自定义条件，再调用方法体；直到最后的方法体执行退出，然后返回上一级方法体，执行到结束；再向上返回，执行至结束。<br><img src="/images/recursion.png" alt="递归"><br><img src="/images/recursion2.png" alt="递归2"></p><h3 id="删除一个带内容的目录"><a href="#删除一个带内容的目录" class="headerlink" title="删除一个带内容的目录"></a>删除一个带内容的目录</h3><p>删除原理：<br>在Windows中，删除目录是从里面往外面删除的。需要用到递归。Java删除不走回收站。</p><h3 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h3><ul><li><p>Properties是hashtable的子类。<br>也就是说它具有map集合的特点，而且它里面存储的键值对都是字符串。  </p></li><li><p>Properties是集合中和IO技术结合的集合容器。<br>该对象的特点：可以用于键值对形式的配置文件。在加载数据时都要有固定格式，键=值。<br>有方法：</p><ul><li>setProperty(String key,String value);</li><li>getProperty(String key);</li></ul></li></ul><p>练习：记录应用程序运行次数，如果使用次数已到，那么给出注册提示。</p><p>很容易能联想到：计数器。该计数器定义在程序中，随着程序的运行而在内存中存在，并进行自增。可是随着该应用程序的退出，该计数器也在内存中消失了。<br>下一次再启动该程序时，又重新开始从0计数。这不能用。应该是，程序即使结束，该计数器的值也存在，下次程序启动会在加载该计数器的值并加1后再重新存储起来。所以要建立一个配置文件，用于记录该软件的使用次数。 使用键值对的形式，这样便于阅读数据，并操作数据。键值对数据是map集合，数据是以文件形式存储，使用io技术。那么io+map–》properties。配置文件可以实现应用程序数据的共享。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import java.util.*;</span><br><span class="line">import java.io.*;</span><br><span class="line">class n1 &#123;</span><br><span class="line">public static void main(String[] args) throws IOException&#123;</span><br><span class="line">Properties prop = new Properties();</span><br><span class="line">File file = new File(&quot;count.ini&quot;);</span><br><span class="line">if(!file.exists())&#123;</span><br><span class="line">file.createNewFile();</span><br><span class="line">&#125;</span><br><span class="line">FileInputStream fis = new FileInputStream(file);</span><br><span class="line">prop.load(fis);</span><br><span class="line">int count = 0;</span><br><span class="line">String value = prop.getProperty(&quot;time&quot;);</span><br><span class="line">if(value!=null)&#123;</span><br><span class="line">count = Integer.parseInt(value);</span><br><span class="line">if(count&gt;=5)&#123;</span><br><span class="line">System.out.println(&quot;您好，使用次数已到，请付钱&quot;);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">count++;</span><br><span class="line">prop.setProperty(&quot;time&quot;,count+&quot;&quot;);</span><br><span class="line">FileOutputStream fos = new FileOutputStream(file);</span><br><span class="line">prop.store(fos,&quot;&quot;);</span><br><span class="line"></span><br><span class="line">fos.close();</span><br><span class="line">fis.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复杂的配置文件描述使用xml文件。</p><h2 id="IO流的其他类"><a href="#IO流的其他类" class="headerlink" title="IO流的其他类"></a>IO流的其他类</h2><h3 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h3><p>提供了打印方法，可以将各种数据类型的数据都原样打印。</p><p>字节打印流：<br>PrintStream<br>构造函数可以接收的参数类型：</p><ol><li>file对象</li><li>字符串路径</li><li>字节输出流OutputStream</li></ol><p>字符打印流：<br>PrintWriter   </p><ol><li>file对象</li><li>字符串路径</li><li>字节输出流OutputStream</li><li>字符输出流Writer</li></ol><h3 id="SequenceInputStream类（合并流）"><a href="#SequenceInputStream类（合并流）" class="headerlink" title="SequenceInputStream类（合并流）"></a>SequenceInputStream类（合并流）</h3><p>表示其他输入流的逻辑串联。</p><h3 id="切割文件"><a href="#切割文件" class="headerlink" title="切割文件"></a>切割文件</h3><p>通过固定数组大小实现切割。</p><h3 id="操作对象"><a href="#操作对象" class="headerlink" title="操作对象"></a>操作对象</h3><p>ObjectInputStream与ObjectOutputStream类</p><h3 id="操作对象-1"><a href="#操作对象-1" class="headerlink" title="操作对象"></a>操作对象</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;千里之台起于累土&quot;&gt;&lt;a href=&quot;#千里之台起于累土&quot; class=&quot;headerlink&quot; title=&quot;千里之台起于累土&quot;&gt;&lt;/a&gt;千里之台起于累土&lt;/h1&gt;&lt;h2 id=&quot;File类&quot;&gt;&lt;a href=&quot;#File类&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>SQL语句</title>
    <link href="http://yoursite.com/2018/09/25/9.25/"/>
    <id>http://yoursite.com/2018/09/25/9.25/</id>
    <published>2018-09-25T00:49:58.542Z</published>
    <updated>2018-09-27T09:10:12.042Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据定义"><a href="#数据定义" class="headerlink" title="数据定义"></a>数据定义</h1><h2 id="模式的定义与删除"><a href="#模式的定义与删除" class="headerlink" title="模式的定义与删除"></a>模式的定义与删除</h2><h3 id="定义模式"><a href="#定义模式" class="headerlink" title="定义模式"></a>定义模式</h3><blockquote><p>CREATE SCHEMA &lt;模式名&gt; AUTHOTIZATION &lt;用户名&gt; [&lt;表定义子句&gt; |&lt;视图定义子句&gt; |&lt;授权定义子句&gt;];</p></blockquote><p>为用户WANG定义一个学生-课程模式S-T:<br><code>CREATE SCHEMA &quot;S-T&quot; AUTHORIZATION WANG;</code></p><p>为用户ZHANG创建一个模式TEST，并且在其中定义一个表TAB1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE SCHEMA TEST AUTHORIZATION ZHANG</span><br><span class="line">    CREATE TABLE TAB1(COL1 SMALLINT,</span><br><span class="line">                      COL2 INT,</span><br><span class="line">                      COL3 CHAR(20),</span><br><span class="line">                      COL4 NUMBERIC(10,3),</span><br><span class="line">                      COL5 DECIMAL(5,2)</span><br><span class="line">                      );</span><br></pre></td></tr></table></figure></p><h3 id="删除模式"><a href="#删除模式" class="headerlink" title="删除模式"></a>删除模式</h3><blockquote><p>DROP SCHEMA &lt;模式名&gt;&lt;CASCADE|RESTRICT&gt;;</p></blockquote><p>CASCADE级联，表示在删除模式的同时把该模式下所有的数据库对象全部删除；<br>RESTRICT限制，表示如果该模式中已经定义了下属的数据库对象（如表、图等），则拒绝该删除语句的执行。</p><p><code>DROP SCHEMA ZHANG CASCADE; 该语句删除了模式ZHANG，同时，该模式中已经定义的TAB1也被删除。</code></p><h2 id="表的定义修改与删除"><a href="#表的定义修改与删除" class="headerlink" title="表的定义修改与删除"></a>表的定义修改与删除</h2><h3 id="定义基本表"><a href="#定义基本表" class="headerlink" title="定义基本表"></a>定义基本表</h3><blockquote><p>CREATE TABLE &lt;表名&gt;(&lt;列名&gt;&lt;数据类型&gt;[列级完整性约束条件]<br>….<br>[,&lt;表级完整性约束条件&gt;]);</p></blockquote><p>创建一个“学生”表Student。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Student(</span><br><span class="line">Sno CHAR(9) PRIMARY KEY,</span><br><span class="line">Sname CHAR(20) UNIQUE,</span><br><span class="line">Ssex CHAR(2),</span><br><span class="line">Sage SMALLINT,</span><br><span class="line">Sdept CHAR(20)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>创建一个“课程“表Course。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Course(</span><br><span class="line">Cno CHAR(4) PRIMARY KEY,</span><br><span class="line">Cname CHAR(40) NOT NULL,</span><br><span class="line">Cpno CHAR(4),</span><br><span class="line">Ccredit SMALLINT,</span><br><span class="line">FOREIGN KEY(Cpno) REFERENCES Course(Cno) /* 表级完整性约束条件，Cpno是外码，被参照表是Course，被参照列是Cno */</span><br><span class="line">);</span><br><span class="line">本例书名参照表和被参照表可以是同一个表。</span><br></pre></td></tr></table></figure></p><p>建立学生选课表SC。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE SC(</span><br><span class="line">Sno CHAR(9),</span><br><span class="line">Cno CHAR(4),</span><br><span class="line">Grade SMALLINT,</span><br><span class="line">PRIMARY KEY (Sno,Cno),     /* 主码由两个属性构成，必须作为表级完整性进行定义 */</span><br><span class="line">FOREIGN KEY (Sno) REFERENCES Student(Sno),  /* 表级完整性约束条件，Sno是外码，被参照表是Student */</span><br><span class="line">FOREIGN KEY (Cno) REFERENCES Course(Cno)    /* 表级完整性约束条件，Cno是外码，被参照表是Course */</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h3 id="修改基本表"><a href="#修改基本表" class="headerlink" title="修改基本表"></a>修改基本表</h3><blockquote><p>ALTER TABLE &lt;表名&gt;<br>[ADD [COLUMN] &lt;新列名&gt;&lt;数据类型&gt;[完整性约束条件]]<br>[ADD &lt;表级完整性约束&gt;]<br>[DROP [COLUMN] &lt;列名&gt; [CASCADE|RESTRICT]]<br>[DROP CONSTRAINT &lt;完整性约束条件&gt; [CASCADE|RESTRICT]]<br>[ALTER COLUMN &lt;列名&gt;&lt;数据类型&gt;];</p></blockquote><p>向Student表增加“入学时间”列，其数据类型为日期型。<br><code>ALTER TABLE Student ADD S_entrance DATE;</code></p><p>将年龄的数据类型由字符型（假设原来为字符型）改为整数。<br><code>ALTER TABLE Student ALTER COLUMN Sage INT;</code></p><p>增加课程名称必须取唯一值的约束条件。<br><code>ALTER TABLE Course ADD UNIQUE(Cname);</code></p><h3 id="删除基本表"><a href="#删除基本表" class="headerlink" title="删除基本表"></a>删除基本表</h3><blockquote><p>DROP TABLE &lt;表名&gt; [RESTRICT|CASCADE];</p></blockquote><p>若选择RESTRICT，则该表的删除是有限制条件的。欲删除的表不能被其他表的约束所引用，不能有视图，不能有触发器，不能有存储过程或函数等。<br>若选择CASCADE，则该表的删除没有限制条件。在删除表的同时，相关的依赖对象，即将被一起删除。</p><p>删除Student表<br><code>DROP TABLE Student CASCADE;</code></p><h2 id="索引的建立与删除"><a href="#索引的建立与删除" class="headerlink" title="索引的建立与删除"></a>索引的建立与删除</h2><h3 id="建立索引"><a href="#建立索引" class="headerlink" title="建立索引"></a>建立索引</h3><blockquote><p>CREATE [UNIQUE] [CLUSTER] INDEX &lt;索引名&gt; ON &lt;表名&gt;(&lt;列名&gt; [&lt;次序&gt;] [,&lt;列名&gt;[&lt;次序&gt;]]…);   </p></blockquote><p>UNIQUE表明此索引的每一个索引值只对应唯一的数据记录。<br>CLUSTER表示要建立的索引是聚族索引。</p><p>为学生-课程数据库中的Student、Course和SC三个表建立索引。其中Student表按学号升序建唯一索引，Course表按课程号升序建唯一索引，SC表按学号升序和课程号降序建唯一索引。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE UNIQUE INDEX Stusno ON Student(Sno);</span><br><span class="line">CREATE UNIQUE INDEX Coucno ON Course(Cno);</span><br><span class="line">CREATE UNIQUE INDEX SCno ON SC(Sno ASC,Cno DESC);</span><br></pre></td></tr></table></figure><h3 id="修改索引"><a href="#修改索引" class="headerlink" title="修改索引"></a>修改索引</h3><blockquote><p>ALTER INDEX &lt;旧索引名&gt; RENAME TO &lt;新索引名&gt;;</p></blockquote><p>将SC表的SCno索引名改为SCSno。<br><code>ALTER INDEX SCno RENAME TO SCSno;</code></p><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><blockquote><p>DROP INDEX &lt;表名&gt; &lt;索引名&gt;;</p></blockquote><h1 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h1><p>数据查询的一般格式为：</p><blockquote><p>SELECT [ALL | DISTINCT] &lt;目标列表达式&gt;[,&lt;目标列表达式&gt;]…<br>FROM &lt;表名或视图名&gt;[,&lt;表名或视图名&gt;…] | (&lt; SELECT语句 &gt;) [AS] &lt;别名&gt;<br>[WHERE &lt;条件表达式&gt;]<br>[GROUP BY &lt;列名 1&gt; [HAVING &lt;条件表达式&gt;]]<br>[ORDER BY &lt;列名 2&gt; [ASC|DESC]];</p></blockquote><h2 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h2><h3 id="选择表中若干列"><a href="#选择表中若干列" class="headerlink" title="选择表中若干列"></a>选择表中若干列</h3><p>查询全体学生的学号和姓名。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT Sno,Sname</span><br><span class="line">FROM Student;</span><br></pre></td></tr></table></figure></p><p>查询全体学生的姓名、学号、所在系。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT Sname,Sno,Sdept</span><br><span class="line">FROM Student;</span><br></pre></td></tr></table></figure></p><p>查询全体学生的详细记录。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM Student;</span><br></pre></td></tr></table></figure></p><p>查询全体学生的姓名及出生年份。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT Sname,2014-Sage</span><br><span class="line">FROM Student;</span><br></pre></td></tr></table></figure></p><p>查询全体学生的姓名、出生年份和所在的院系，要求用小写字母表示系名。并给出别名NAME,BIRTH,BIRTHDAY,DEPARTMENT表示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT Sname NAME,&apos;Year of Birth&apos; BIRTH,</span><br><span class="line">2014-Sage BIRTHDAY,LOWER(Sdept) DEPARTMENT</span><br><span class="line">FROM Student;</span><br></pre></td></tr></table></figure></p><h3 id="选择表中的若干元组"><a href="#选择表中的若干元组" class="headerlink" title="选择表中的若干元组"></a>选择表中的若干元组</h3><p>查询选修了课程的学生学号，并去除重复的行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT Sno</span><br><span class="line">FROM SC;</span><br></pre></td></tr></table></figure></p><p>查询计算机科学系全体学生的名单。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT Sname</span><br><span class="line">FROM Student</span><br><span class="line">WHERE Sdept=&apos;CS&apos;;</span><br></pre></td></tr></table></figure></p><p>查询年龄(不)在20~23岁（包括20岁和23岁）之间的学生的姓名、系别和年龄。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT Sname,Sdept,Sage</span><br><span class="line">FROM Student</span><br><span class="line">WHERE Sage (NOT) BETWEEN 20 AND 23;</span><br></pre></td></tr></table></figure></p><p>查询(全不是)计算机科学系CS，数学系MA，信息系IS学生的姓名和性别。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT Sname,Ssex</span><br><span class="line">FROM Student</span><br><span class="line">WHERE Sdept (NOT) IN(&apos;CS&apos;,&apos;MA&apos;,&apos;IS&apos;);</span><br></pre></td></tr></table></figure></p><h4 id="字符匹配"><a href="#字符匹配" class="headerlink" title="字符匹配"></a>字符匹配</h4><blockquote><p>[NOT] LIKE ‘&lt;匹配串&gt;’ [ESCAPE ‘&lt;换码字符&gt;’]</p></blockquote><p>其含义是查找指定的属性列值与&lt;匹配串&gt;相匹配的元组。<br>&lt;匹配串&gt;可以是一个完整的字符串，也可以是含有通配符%和_</p><ul><li>%代表任意长度的字符串（可为0）</li><li>_代表任意单个字符</li></ul><p>查询所有姓刘的学生的姓名、学号和性别。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT Sname,Sno,Ssex</span><br><span class="line">FROM Student</span><br><span class="line">WHERE Sname LIKE &apos;刘%&apos;;</span><br></pre></td></tr></table></figure></p><p>查询姓“欧阳”且全名为三个汉字的学生的姓名。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT Sname</span><br><span class="line">FROM Student</span><br><span class="line">WHERE Sname LIKE &apos;欧阳_&apos;;</span><br></pre></td></tr></table></figure></p><p>查询名字中第二个字为“阳”的学生的姓名和学号。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT Sname,Sno</span><br><span class="line">FROM Student</span><br><span class="line">WHERE Sname LIKE &apos;_阳%&apos;;</span><br></pre></td></tr></table></figure></p><p>查询DB_Design课程的课程号和学分。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT Cno,Ccredit</span><br><span class="line">FROM Course</span><br><span class="line">WHERE Cname LIKE &apos;DB\_Design&apos; ESCAPE&apos;\&apos;;</span><br></pre></td></tr></table></figure></p><p>ESCAPE’\’表示“\“为换码字符。</p><p>查询以”DB_“开头，且倒数第三个字符为i的课程的详细情况。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM Course</span><br><span class="line">WHERE Cname LIKE &apos;DB\_%i__&apos; ESCAPE&apos;\&apos;;</span><br></pre></td></tr></table></figure></p><h4 id="多重条件查询"><a href="#多重条件查询" class="headerlink" title="多重条件查询"></a>多重条件查询</h4><p>查询计算机科学系年龄在20岁以下的学生姓名。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT Sname</span><br><span class="line">FROM Student</span><br><span class="line">WHERE Sdept=&apos;CS&apos; AND Sage&lt;20;</span><br></pre></td></tr></table></figure></p><h3 id="ORDER-BY子句"><a href="#ORDER-BY子句" class="headerlink" title="ORDER BY子句"></a>ORDER BY子句</h3><p>查询选修了3号课程的学生的学号及其成绩，查询结果按分数的降序排列。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT Sno,Grade</span><br><span class="line">FROM SC</span><br><span class="line">WHERE Cno=&apos;3&apos;</span><br><span class="line">ORDER BY Grade DESC;</span><br></pre></td></tr></table></figure></p><h3 id="聚集函数"><a href="#聚集函数" class="headerlink" title="聚集函数"></a>聚集函数</h3><p>查询学生总人数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(*)</span><br><span class="line">FROM Student;</span><br></pre></td></tr></table></figure></p><p>查询选修了课程的学生人数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(DISTINCT Sno)</span><br><span class="line">FROM SC;</span><br></pre></td></tr></table></figure></p><p>查询选修1号课程的学生的平均成绩。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT AVG(Grade)</span><br><span class="line">FROM SC</span><br><span class="line">WHERE Cno=&apos;1&apos;;</span><br></pre></td></tr></table></figure></p><p>查询选修1号课程的学生的最高分。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT MAX(Grade)</span><br><span class="line">FROM SC</span><br><span class="line">WHERE Cno=&apos;1&apos;;</span><br></pre></td></tr></table></figure></p><p>查询学生201215012选修课程的总学分数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT SUM(Ccredit)</span><br><span class="line">FROM SC,Course</span><br><span class="line">WHERE Sno=&apos;201215012&apos; </span><br><span class="line">      AND SC.Cno=Course.Cno;</span><br></pre></td></tr></table></figure></p><p><strong>聚集函数只能用于SELECT子句和GROUP BY中的HAVING子句。</strong></p><h3 id="GROUP-BY子句"><a href="#GROUP-BY子句" class="headerlink" title="GROUP BY子句"></a>GROUP BY子句</h3><p>GROUP BY子句将查询结果按某一列或多列的值分组，值相等的为一组。<br>分组的目的是为了细化聚集函数的作用对象。分组后，聚集函数将作用于每组，即每一组都有一个函数值。</p><p>求各个课程号及相应的选课人数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT Cno,COUNT(Sno)</span><br><span class="line">FROM SC</span><br><span class="line">GROUP BY Cno;</span><br></pre></td></tr></table></figure></p><p>该语句对查询结果按Cno的值分组，所有具有相同Cno值的元组为一组，然后对每组作用的聚集函数COUNT进行计算，以求得该组的学生人数。</p><p>查询选修了三门以上课程的学生学号。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT Sno</span><br><span class="line">FROM SC</span><br><span class="line">GROUP BY Sno</span><br><span class="line">HAVING COUNT(*)&gt;3;</span><br></pre></td></tr></table></figure></p><p>COUNT(*)统计元组个数。<br>COUNT(列名 1)统计1列中值的个数。</p><p>查询平均成绩大于等于90分的学生学号和平均成绩。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT Sno,AVG(Grade)</span><br><span class="line">FROM SC</span><br><span class="line">GROUP BY Sno</span><br><span class="line">HAVING AVG(Grad)&gt;=90;</span><br></pre></td></tr></table></figure></p><h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><h3 id="等值与非等值连接查询"><a href="#等值与非等值连接查询" class="headerlink" title="等值与非等值连接查询"></a>等值与非等值连接查询</h3><p>连接查询的WHERE子句用来连接两个表的条件称为<strong>连接条件或连接谓词</strong>，其一般格式为：</p><blockquote><p>[&lt;表名 1&gt;.]&lt;列名 1&gt;&lt;比较运算符&gt;[&lt;表名 2.&gt;]&lt;列名 2&gt;</p></blockquote><p>其中比较运算符主要有=、&gt;、&lt;、&gt;=、&lt;=、!=(或&lt;&gt;)等。当连接运算符为=时，称为等值连接。使用其他运算符称为非等值连接。</p><p>查询每个学生及其选修课程的情况。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT Student.*,SC.*</span><br><span class="line">FROM Student,SC</span><br><span class="line">WHERE Student.Sno=SC.Sno;</span><br></pre></td></tr></table></figure></p><p>一条SQL语句可以同时完成选择和连接查询，这时WHERE子句是由连接谓词和选择谓词组成的复合条件。（连接谓词：连接不同条件的；选择谓词：条件中的判断）</p><p>查询选修2号课程且成绩在90分以上的所有学生的学号和姓名。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT Student.Sno,Sname</span><br><span class="line">FROM Student,SC</span><br><span class="line">WHERE Student.Sno=SC.Sno AND  /*连接谓词*/</span><br><span class="line">      SC.Cno=&apos;2&apos; AND SC.Grade&gt;90;  /*其他限定条件*/</span><br></pre></td></tr></table></figure></p><h3 id="自身连接"><a href="#自身连接" class="headerlink" title="自身连接"></a>自身连接</h3><h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><h3 id="多表连接"><a href="#多表连接" class="headerlink" title="多表连接"></a>多表连接</h3><p>查询每个学生的学号、姓名、选修的课程名及成绩。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT Student.Sno,Sname,Cname,Grade</span><br><span class="line">FROM Student,SC,Course</span><br><span class="line">WHERE Student.Sno=SC.Sno AND SC.Cno=Course.Cno;</span><br></pre></td></tr></table></figure></p><p>关系数据库管理系统在执行多表连接时，通常是先进行两个表的连接操作，再将其连接结果与第三个表进行连接。</p><h2 id="嵌套查询"><a href="#嵌套查询" class="headerlink" title="嵌套查询"></a>嵌套查询</h2><p>在SQL语言中，一个SELECT-FROM-WHERE语句称为一个查询块。将一个查询块嵌套在另一个查询块的WHERE子句或HAVING短语的条件中的查询称为嵌套查询。<br>SQL语言支持多层嵌套查询。但是子查询的SELECT语句中不能使用ORDER BY子句，ORDER BY子句只能对最终查询结果排序。</p><h3 id="带IN的子查询"><a href="#带IN的子查询" class="headerlink" title="带IN的子查询"></a>带IN的子查询</h3><p>查询与”刘晨“在同一个系学习的学生。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">①SELECT Sdept</span><br><span class="line">FROM Student</span><br><span class="line">WHERE Sname=&apos;刘晨&apos;;</span><br><span class="line">结果为CS</span><br><span class="line">②SELECT Sno,Sname,Sdept</span><br><span class="line">FROM Student</span><br><span class="line">WHERE Sdept=&apos;CS&apos;;</span><br><span class="line">将第一步插入第二步的查询条件中，</span><br><span class="line">SELECT Sno,Sname,Sdept</span><br><span class="line">FROM Student</span><br><span class="line">WHERE Sdept IN</span><br><span class="line">      (SELECT Sdept</span><br><span class="line">       FROM Student</span><br><span class="line">       WHERE Sname=&apos;刘晨&apos;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>本例中，子查询的查询条件不依赖于父查询，称为不相关子查询。</p><h3 id="带有比较运算符的子查询"><a href="#带有比较运算符的子查询" class="headerlink" title="带有比较运算符的子查询"></a>带有比较运算符的子查询</h3><p>找出每个学生超过他自己选修课程平均成绩的课程号。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT Sno,Cno</span><br><span class="line">FROM SC x</span><br><span class="line">WHERE Grade&gt;=(SELECT AVG(Grade)</span><br><span class="line">              FROM SC y</span><br><span class="line">              WHERE y.Sno=x.Sno);</span><br></pre></td></tr></table></figure></p><p>x是SC的别名，又称为元组变量，可以用来表示SC的一个元组。内层查询是求一个学生选修课程平均成绩的，至于是哪个学生的平均成绩要看参数x.Sno的值，而该值是与父查询相关的，因此此类查询称为相关子查询。</p><h3 id="带有ANY-SOME-或ALL谓词的子查询"><a href="#带有ANY-SOME-或ALL谓词的子查询" class="headerlink" title="带有ANY(SOME)或ALL谓词的子查询"></a>带有ANY(SOME)或ALL谓词的子查询</h3><p><img src="/images/anyall.jpg" alt=""></p><p>查询非计算机科学系中比计算机科学系任意一个学生年龄小的学生姓名和年龄。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT Sname,Sage</span><br><span class="line">FROM Student</span><br><span class="line">WHERE Sage&lt;ANY(SELECT Sage</span><br><span class="line">               FROM Student</span><br><span class="line">               WHERE Sdept=&apos;CS&apos;)</span><br><span class="line">AND Sdept&lt;&gt;&apos;CS&apos;;   /*注意这是父查询块中的条件*/</span><br></pre></td></tr></table></figure></p><h3 id="带有EXISTS谓词的子查询"><a href="#带有EXISTS谓词的子查询" class="headerlink" title="带有EXISTS谓词的子查询"></a>带有EXISTS谓词的子查询</h3><p>EXISTS代表存在量词带有EXISTS谓词的子查询不返回任何数据，只产生逻辑真或者假。<br>查询没有选修1号课程的学生姓名。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT Sname</span><br><span class="line">FROM Student</span><br><span class="line">WHERE NOT EXISTS</span><br><span class="line">      (SELECT *</span><br><span class="line">       FROM SC</span><br><span class="line">       WHERE Sno=Student.Sno AND Cno=&apos;1&apos;);</span><br></pre></td></tr></table></figure></p><p>由EXISTS引出的子查询，其目标列表达式通常都用*，因为带EXISTS的子查询只返回真值，给出列名没有实际意义。</p><h2 id="集合查询"><a href="#集合查询" class="headerlink" title="集合查询"></a>集合查询</h2><p>SELECT语句的查询结果是元组的集合，所以多个SELECT语句的结果可进行集合操作。集合操作主要包括并操作UNION，交操作INTERSECT和差操作EXCEPT。参加集合操作的各查询结果的列数必须相同；对应项的数据类型也必须相同。</p><p>查询计算机科学系的学生及年龄不大于19岁的学生。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM Student</span><br><span class="line">WHERE Sdept=&apos;CS&apos;</span><br><span class="line">UNION</span><br><span class="line">SELECT *</span><br><span class="line">FROM Student</span><br><span class="line">WHERE Sage&lt;=&apos;19&apos;;</span><br></pre></td></tr></table></figure></p><h1 id="数据更新"><a href="#数据更新" class="headerlink" title="数据更新"></a>数据更新</h1><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><h3 id="插入元组"><a href="#插入元组" class="headerlink" title="插入元组"></a>插入元组</h3><blockquote><p>INSERT<br>INTO &lt;表名&gt; [(&lt;属性列 1&gt;[,&lt;属性列 2&gt;]…)]<br>VALUES(&lt;常量 1&gt;[,&lt;常量 2&gt;]….);</p></blockquote><p>将一个新学生元组（学号：201215128，姓名：陈东，性别：男，所在系：CS，年龄：18岁）插入到Student表中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT</span><br><span class="line">INTO Student(Sno,Sname,Ssex,Sdept,Sage)</span><br><span class="line">VALUES(&apos;201215128&apos;,&apos;陈东&apos;,&apos;男&apos;,&apos;CS&apos;,18);</span><br></pre></td></tr></table></figure></p><p>字符串常数要用单引号括起来。</p><h3 id="插入子查询结果"><a href="#插入子查询结果" class="headerlink" title="插入子查询结果"></a>插入子查询结果</h3><blockquote><p>INSERT<br>INTO &lt;表名&gt; [(&lt;属性列 1&gt;[,&lt;属性列 2&gt;…])]<br>子查询;</p></blockquote><p>对每一个系，求学生的平均年龄，并把结果存入数据库。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Dept_age</span><br><span class="line">       (Sdept CHAR(15),</span><br><span class="line">        Avg_age SMALLINT);</span><br><span class="line"></span><br><span class="line">INSERT</span><br><span class="line">INTO Dept_age(Sdept,Avg_age)</span><br><span class="line">SELECT Sdept,AVG(Sage)</span><br><span class="line">FROM Student</span><br><span class="line">GROUP BY Sdept;</span><br></pre></td></tr></table></figure></p><h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><blockquote><p>UPDATE &lt;表名&gt;<br>SET&lt;列名&gt;=&lt;表达式&gt;[,&lt;列名&gt;=&lt;表达式&gt;]…<br>[WHERE &lt;条件&gt;];</p></blockquote><p>用来修改指定表中满足WHERE子句条件的元组。如果省略WHERE子句，则表示要修改表中的所有元组。</p><h3 id="修改某一个元组的值"><a href="#修改某一个元组的值" class="headerlink" title="修改某一个元组的值"></a>修改某一个元组的值</h3><p>将学生201215121的年龄改为22岁。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE Student</span><br><span class="line">SET Sage=22</span><br><span class="line">WHERE Sno=&apos;201215121&apos;;</span><br></pre></td></tr></table></figure></p><h3 id="修改多个元组的值"><a href="#修改多个元组的值" class="headerlink" title="修改多个元组的值"></a>修改多个元组的值</h3><p>将所有学生的年龄增加1岁。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UPDATE Student</span><br><span class="line">SET Sage=Sage+1;</span><br></pre></td></tr></table></figure></p><h3 id="带子查询的修改语句"><a href="#带子查询的修改语句" class="headerlink" title="带子查询的修改语句"></a>带子查询的修改语句</h3><p>将计算机科学系全体学生的成绩置零。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">UPDATE SC</span><br><span class="line">SET Grade=0</span><br><span class="line">WHERE Sno IN</span><br><span class="line">    (SELETE Sno</span><br><span class="line">     FROM Student</span><br><span class="line">     WHERE Sdept=&apos;CS&apos;</span><br><span class="line">    );</span><br></pre></td></tr></table></figure></p><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><blockquote><p>DELETE<br>FROM &lt;表名&gt;<br>[WHERE &lt;条件&gt;];</p></blockquote><h3 id="删除一个元组的值"><a href="#删除一个元组的值" class="headerlink" title="删除一个元组的值"></a>删除一个元组的值</h3><p>删除学号为201215128的学生记录。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DELETE </span><br><span class="line">FROM Student</span><br><span class="line">WHERE Sno=&apos;201215128&apos;;</span><br></pre></td></tr></table></figure></p><h3 id="删除多个元组的值"><a href="#删除多个元组的值" class="headerlink" title="删除多个元组的值"></a>删除多个元组的值</h3><p>删除所有学生的选课记录。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DELETE </span><br><span class="line">FROM SC;</span><br></pre></td></tr></table></figure></p><h3 id="带子查询的删除语句"><a href="#带子查询的删除语句" class="headerlink" title="带子查询的删除语句"></a>带子查询的删除语句</h3><p>删除计算机科学系所有学生的选课记录。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DELETE</span><br><span class="line">FROM SC</span><br><span class="line">WHERE Sno IN</span><br><span class="line">      (SELECT Sno</span><br><span class="line">       FROM Student</span><br><span class="line">       WHERE Sdept=&apos;CS&apos;</span><br><span class="line">       );</span><br></pre></td></tr></table></figure></p><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><h2 id="定义视图"><a href="#定义视图" class="headerlink" title="定义视图"></a>定义视图</h2><h3 id="建立视图"><a href="#建立视图" class="headerlink" title="建立视图"></a>建立视图</h3><blockquote><p>CREATE VIEW &lt;视图名&gt;[(&lt;列名&gt;[,&lt;列名&gt;]…)]<br>AS &lt;子查询&gt;<br>[WITH CHECK OPTION];</p></blockquote><p>建立信息系学生的视图。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE VIEW IS_Student</span><br><span class="line">AS</span><br><span class="line">SELECT Sno,Sname,Sage</span><br><span class="line">FROM Student</span><br><span class="line">WHERE Sdept=&apos;IS&apos;;</span><br></pre></td></tr></table></figure></p><p>建立信息系学生的视图，并要求进行修改和插入操作时仍需保证该视图只有信息系的学生。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE VIEW IS_Student</span><br><span class="line">AS</span><br><span class="line">SELECT Sno,Sname,Sage</span><br><span class="line">FROM Student</span><br><span class="line">WHERE Sdept=&apos;IS&apos;</span><br><span class="line">WITH CHECK OPTION;</span><br></pre></td></tr></table></figure></p><p>在定义视图时，加上了WITH CHECK OPTION子句，以后对该视图进行插入、删除、修改操作时，关系数据库管理系统会自动加上Sdept_’IS’的条件。（即子查询中的条件表达式）</p><p>建立信息系选修了1号课程的学生的视图（包括学号、姓名、成绩）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE VIEW IS_S1(Sno,Sname,Grade)</span><br><span class="line">AS</span><br><span class="line">SELECT Student.Sno,Sname,Grade</span><br><span class="line">FROM Student,SC</span><br><span class="line">WHERE Sdept=&apos;IS&apos; AND</span><br><span class="line">      Student.Sno=SC.Sno AND</span><br><span class="line">      SC.Cno=&apos;1&apos;;</span><br></pre></td></tr></table></figure></p><p>用带有聚集函数和GROUP BY子句的查询来定义视图，这种视图叫分组视图。   </p><p>将学生的学号及平均成绩定义成一个视图。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE VIEW S_G(Sno,Gavg)</span><br><span class="line">AS</span><br><span class="line">SELECT Sno,AVG(Grade)</span><br><span class="line">FROM SC</span><br><span class="line">GROUP BY Sno;</span><br></pre></td></tr></table></figure></p><h3 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h3><blockquote><p>DROP VIEW &lt;视图名&gt; [CASCADE];</p></blockquote><h3 id="查询视图"><a href="#查询视图" class="headerlink" title="查询视图"></a>查询视图</h3><p>在信息系学生的视图中找出年龄小于20岁的学生。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT Sno,Sage</span><br><span class="line">FROM IS_Student</span><br><span class="line">WHERE Sage&lt;20;</span><br></pre></td></tr></table></figure></p><h3 id="更新视图"><a href="#更新视图" class="headerlink" title="更新视图"></a>更新视图</h3><p>由于视图是不实际存在的虚表，因此对视图的更新最终要转换为对基本表的操作。</p><p>将信息系学生视图IS_Student中学号为“201215122”的学生姓名改为“刘晨”。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">UPDATE IS_Student</span><br><span class="line">SET Sname=&apos;刘晨&apos;</span><br><span class="line">WHERE Sno=&apos;201215122&apos;;</span><br><span class="line">转换后的更新语句为</span><br><span class="line">UPDATE Student</span><br><span class="line">SET Sname=&apos;刘晨&apos;</span><br><span class="line">WHERE Sno=&apos;201215122&apos; AND Sdept=&apos;IS&apos;;</span><br></pre></td></tr></table></figure></p><h2 id="视图的作用"><a href="#视图的作用" class="headerlink" title="视图的作用"></a>视图的作用</h2><p>视图能够简化用户的操作。<br>视图使用户能以多种角度看待同一数据。<br>视图对重构数据库提供了一定程度的逻辑独立性。<br>视图能对机密数据提供安全保护。<br>适当利用视图可以更清晰地表达查询。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据定义&quot;&gt;&lt;a href=&quot;#数据定义&quot; class=&quot;headerlink&quot; title=&quot;数据定义&quot;&gt;&lt;/a&gt;数据定义&lt;/h1&gt;&lt;h2 id=&quot;模式的定义与删除&quot;&gt;&lt;a href=&quot;#模式的定义与删除&quot; class=&quot;headerlink&quot; title=&quot;模
      
    
    </summary>
    
      <category term="DataBase" scheme="http://yoursite.com/categories/DataBase/"/>
    
    
  </entry>
  
  <entry>
    <title>Java基础（十六）</title>
    <link href="http://yoursite.com/2018/09/23/9.23/"/>
    <id>http://yoursite.com/2018/09/23/9.23/</id>
    <published>2018-09-23T04:10:54.593Z</published>
    <updated>2018-10-01T02:50:19.661Z</updated>
    
    <content type="html"><![CDATA[<h1 id="千里之台起于累土"><a href="#千里之台起于累土" class="headerlink" title="千里之台起于累土"></a>千里之台起于累土</h1><h2 id="IO字节流"><a href="#IO字节流" class="headerlink" title="IO字节流"></a>IO字节流</h2><p>字符流：  </p><ul><li>FileReader</li><li>FileWriter</li><li>BufferedReader</li><li>BufferedWriter</li></ul><p>字节流:FileInputStream,FileOutputStream，BufferedInputStream，BufferedOutputStream</p><p>OutputStream：此抽象类是表示输出字节流的所有类的超类<br>FileOutputStream：文件输出流是用于将数据写入 File 或 FileDescriptor 的输出流<br>InputStream：此抽象类是表示字节输入流的所有类的超类。<br>FileInputStream：FileInputStream 从文件系统中的某个文件中获得输入字节。FileInputStream 用于读取诸如图像数据之类的原始字节流。要读取字符流，请考虑使用 FileReader。</p><h3 id="FileInputStream类"><a href="#FileInputStream类" class="headerlink" title="FileInputStream类"></a>FileInputStream类</h3><p>其中方法：</p><ul><li>available()：获取文件中字符个数。/n/r表示一个回车，也是两个字符串。不过这个方法对于较大数据会导致内存溢出。</li></ul><p>不用flush()。</p><h3 id="BufferedWriterStream"><a href="#BufferedWriterStream" class="headerlink" title="BufferedWriterStream"></a>BufferedWriterStream</h3><p>该类实现缓冲的输出流。通过设置这种输出流，应用程序就可以将各个字节写入底层输出流中，而不必针对每次字节写入调用底层系统。 </p><h3 id="BufferedInputStream"><a href="#BufferedInputStream" class="headerlink" title="BufferedInputStream"></a>BufferedInputStream</h3><p>用来为另一个输入流添加一些功能。在创建 BufferedInputStream 时，会创建一个内部缓冲区数组。</p><h3 id="读取键盘录入"><a href="#读取键盘录入" class="headerlink" title="读取键盘录入"></a>读取键盘录入</h3><p>读取键盘录入：System.out:对应的是标准输出设备，控制台。<br>System.in:对应的是标准输入设备，键盘。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import java.io.*;</span><br><span class="line"></span><br><span class="line">class ReadInDemo&#123;</span><br><span class="line">public static void main(String[] args) throws IOException&#123;</span><br><span class="line">InputStream in = System.in;</span><br><span class="line">StringBuilder sb = new StringBuilder();</span><br><span class="line">/* while((ch = in.read())!=-1)&#123;</span><br><span class="line">System.out.println(ch); */</span><br><span class="line">while(true)&#123;</span><br><span class="line">int ch = in.read();</span><br><span class="line">if(ch==&apos;\r&apos;)</span><br><span class="line">continue;</span><br><span class="line">else if(ch==&apos;\n&apos;)&#123;</span><br><span class="line">String s = sb.toString();</span><br><span class="line">if(s.equals(&quot;over&quot;))</span><br><span class="line">   break;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">/* 下面的delete()方法是用来在输出字符串之后清空StringBuilder的。 */</span><br><span class="line">sb.delete(0,sb.length());</span><br><span class="line">&#125;</span><br><span class="line">else </span><br><span class="line">      sb.append((char)ch);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="读取转换流"><a href="#读取转换流" class="headerlink" title="读取转换流"></a>读取转换流</h3><p>readLine()方法是字符流BufferedReader类中的方法。而键盘录入的read方法是字节流InputStream的方法。</p><p>InputStreamReader是字节流通向字符流的桥梁。继承Reader类（字符流）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import java.io.*;</span><br><span class="line"></span><br><span class="line">class TransStreamDemo&#123;</span><br><span class="line">public static void main(String[] args) throws IOException&#123;</span><br><span class="line">//获取键盘录入对象</span><br><span class="line">InputStream in =System.in;</span><br><span class="line">//将字节流对象转成字符流对象，使用转换流InputStreamReader。</span><br><span class="line">InputStreamReader isr = new InputStreamReader(in);</span><br><span class="line">//为了提高效率，将字符串进行缓冲区技术高效操作，使用BufferedReader</span><br><span class="line">BufferedReader bufr = new BufferedReader(isr);</span><br><span class="line"></span><br><span class="line">String line = null;</span><br><span class="line"></span><br><span class="line">while((line = bufr.readLine())!=null)&#123;</span><br><span class="line">if(&quot;over&quot;.equals(line))</span><br><span class="line">break;</span><br><span class="line">System.out.println(line.toUpperCase());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">bufr.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="写入转换流"><a href="#写入转换流" class="headerlink" title="写入转换流"></a>写入转换流</h3><p>OutputStreamWriter 是字符流通向字节流的桥梁。继承Writer类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import java.io.*;</span><br><span class="line"></span><br><span class="line">class TransStreamDemo&#123;</span><br><span class="line">public static void main(String[] args) throws IOException&#123;</span><br><span class="line">//获取键盘录入对象</span><br><span class="line">InputStream in =System.in;</span><br><span class="line">//将字节流对象转成字符流对象，使用转换流InputStreamReader。</span><br><span class="line">InputStreamReader isr = new InputStreamReader(in);</span><br><span class="line">//为了提高效率，将字符串进行缓冲区技术高效操作，使用BufferedReader</span><br><span class="line">BufferedReader bufr = new BufferedReader(isr);</span><br><span class="line"></span><br><span class="line">//System.out 是“标准”输出流。此流已打开并准备接受输出数据。用父类OutputStream来接收</span><br><span class="line">OutputStream out = System.out;</span><br><span class="line">//创建使用默认字符编码的OutputStreamWriter；是</span><br><span class="line">//字符流通向字节流的桥梁（不就是互通吗？）；是Writer的子类，也是字符流啊！</span><br><span class="line">OutputStreamWriter osw = new OutputStreamWriter(out);</span><br><span class="line">//BufferedWriter用来将文本写入字符输出流，缓冲各个字符。</span><br><span class="line">//下面的构造方法是创建一个使用osw大小缓冲区的缓冲字符输出流</span><br><span class="line">BufferedWriter bfw = new BufferedWriter(osw);</span><br><span class="line"></span><br><span class="line">String line = null;</span><br><span class="line"></span><br><span class="line">while((line = bufr.readLine())!=null)&#123;</span><br><span class="line">if(&quot;over&quot;.equals(line))</span><br><span class="line">break;</span><br><span class="line">//将字符串line写入到bfw中</span><br><span class="line">bfw.write(line);</span><br><span class="line">//写入一个行分隔符。（因为可能在Windows和Linux下运行，他们的换行符不同，不是固定的串）</span><br><span class="line">bfw.newLine();</span><br><span class="line">//刷新该流的缓冲。如果该流已保存缓冲区中各种 write() 方法的所有字符，则立即将它们写入预期目标。</span><br><span class="line">bfw.flush();</span><br><span class="line">&#125;</span><br><span class="line">bufr.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="流操作规律"><a href="#流操作规律" class="headerlink" title="流操作规律"></a>流操作规律</h3><p>流操作的基本规律：<br>流的对象有很多。要选择哪个来使用？<br>通过三个明确来选择：</p><ol><li>明确源和目的<ul><li>源：输入流。InputStream、Reader</li><li>目的：输出流。OutputStream、Writer</li></ul></li><li>操作的数据是否是纯文本<ul><li>是：字符流</li><li>不是：字节流</li></ul></li><li>当体系明确后，在明确要使用哪个具体的对象，通过设备来区分<ul><li>源设备：内存、硬盘、键盘</li><li>目的设备：内存、硬盘、控制台</li></ul></li></ol><p>例如：</p><blockquote><p>将一个文本文件中数据存储到另一个文件中。即复制文件。<br> 源：因为是源，所以使用读取流，InputStream和Reader<br> 是不是操作文本文件<br> 是！选择Reader<br> 接下来明确使用该体系中哪个对象。<br> 明确设备：硬盘。<br> Reader体系中可以操作文件的对象是FileReader<br> 是否需要提高效率：是！加入Reader体系中缓冲区BufferedReader。</p><p>FileReader fr = new FileReader(“a.txt”);<br>BufferedReader buff =new BufferedReader(fr);</p><p> 目的：OutputStream和Writer<br> 是不是纯文本文件<br> 是！Writer<br> 设备：硬盘。一个文件<br> Writer体系中能操作文件的对象时FileWriter   </p><p> FileWriter fw =new FileWriter(“b.txt”);<br> BufferedWriter bfw = new BufferedWriter(bfw);</p></blockquote><hr><blockquote><p>需求：将键盘录入的数据保存到一个文件中。<br>这个需求中有源和目的都存在<br>那么分别分析<br>源：InputStream Reader<br>是不是纯文本？是！Reader   </p></blockquote><blockquote><p>设备：键盘。对应的对象是System.in。<br>但是需要使用Reader，但这里的System.in是字节流？<br>为了操作键盘的文本数据方便。转成字符流按照字符串操作是最方便的。<br>所以既然明确了Reader，那么就将System.in转换成Reader。<br>这就需要Reader体系下的读取转换流InputStreamReader   </p></blockquote><blockquote><p>InputStreamReader isr = new InputStreamReader(System.in);</p></blockquote><blockquote><p>需要提高效率吗？需要！BufferedReader<br>BufferedReader bufr = new BuffereReader(isr);</p></blockquote><blockquote><p>目的：OutputStream和Writer<br>是纯文本文件：Writer<br>设备：文件中。使用FileWriter。<br>所以FileWriter fw =new FileWriter(“a.txt”);<br>需不需要提高效率<br>需要：BufferedWriter bw = new BufferedWriter(fw);  </p></blockquote><blockquote><p>扩展，想要把录入的数据按照指定的编码表（utf-8），将数据存到文件中。</p><hr><p>目的：OutputStream Writer<br>是否是纯文本？是！Writer<br>设备：硬盘。一个文件。使用FileWriter。<br>但是FileWriter是使用的默认编码表。GBK。   </p></blockquote><blockquote><p>但是存储时，需要加入指定编码表utf-8。而指定的编码表只有转换流可以指定。<br>所以要使用的对象是OutputStreamWriter。<br>而该转换流对象要接收一个字节输入流。而且还可以操作的文件的字节输出流。FileOutputStream<br>OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream(“d.txt”),”UTF-8”);<br>需要高效吗？需要<br>BufferedWriter bufw = new BufferWriter(osw);   </p></blockquote><blockquote><p>转换流什么时候使用？字符和字节之间的桥梁，通常，涉及到字符编码转换时，需要用到转换流。</p></blockquote><h3 id="打印系统信息到文件"><a href="#打印系统信息到文件" class="headerlink" title="打印系统信息到文件"></a>打印系统信息到文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Properties prop = System.getProperties();</span><br><span class="line">prop.list(new PrintStream(&quot;sysinfo.txt&quot;));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;千里之台起于累土&quot;&gt;&lt;a href=&quot;#千里之台起于累土&quot; class=&quot;headerlink&quot; title=&quot;千里之台起于累土&quot;&gt;&lt;/a&gt;千里之台起于累土&lt;/h1&gt;&lt;h2 id=&quot;IO字节流&quot;&gt;&lt;a href=&quot;#IO字节流&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Java基础（十五）</title>
    <link href="http://yoursite.com/2018/09/21/9.21/"/>
    <id>http://yoursite.com/2018/09/21/9.21/</id>
    <published>2018-09-21T08:30:52.271Z</published>
    <updated>2018-09-23T01:54:45.165Z</updated>
    
    <content type="html"><![CDATA[<h3 id="BufferedReader"><a href="#BufferedReader" class="headerlink" title="BufferedReader"></a>BufferedReader</h3><ol><li>从字符输入流中读取文本，缓冲各个字符，从实现字符、数组和行的高效读取。</li><li>readLine()：读取一个文本行。返回包含该行内容的字符串，不包含任何终止符，如果到达流末尾，则返回null。</li></ol><p>下面是一个通过BufferedReader和BufferedWriter拷贝文件的类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package io;</span><br><span class="line"></span><br><span class="line">import java.io.*;</span><br><span class="line"></span><br><span class="line">public class BufferedReaderDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        BufferedReader bufr = null;</span><br><span class="line">        BufferedWriter bufw = null;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            bufr = new BufferedReader(new FileReader(&quot;buf.txt&quot;));</span><br><span class="line">            bufw = new BufferedWriter(new FileWriter(&quot;buf_copy.txt&quot;));</span><br><span class="line">            String line = null;</span><br><span class="line"></span><br><span class="line">            while ((line = bufr.readLine()) != null) &#123;</span><br><span class="line">                bufw.write(line);</span><br><span class="line">                bufw.newLine();</span><br><span class="line">                bufw.flush();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                bufw.close();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                System.out.println(&quot;写入缓冲区失败&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                bufr.close();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                System.out.println(&quot;读取缓冲区失败&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="装饰设计模式"><a href="#装饰设计模式" class="headerlink" title="装饰设计模式"></a>装饰设计模式</h3><p>当想要对已有的对象进行功能增强时，可以定义类，将已有对象传入，基于已有的功能，并提供加强功能。那么自定义的该类为装饰类。<br>装饰类通常会通过构造方法接受被增强的对象；并基于被装饰的对象的功能，提供更强的功能。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">class Person&#123;</span><br><span class="line">    public void chifan()&#123;</span><br><span class="line">    System.out.println(&quot;吃饭&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class SuperPerson&#123;</span><br><span class="line">    private Person p;</span><br><span class="line">SuperPerson(Person p)&#123;</span><br><span class="line">    this.p = p;</span><br><span class="line">    &#125;</span><br><span class="line">public void superchifan()&#123;</span><br><span class="line">    System.out.println(&quot;胃酒&quot;);</span><br><span class="line">p.chifan();</span><br><span class="line">System.out.println(&quot;甜点&quot;);</span><br><span class="line">System.out.println(&quot;来一根烟&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class PersonDemo&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">    Person p =new Person();</span><br><span class="line">SuperPerson p1 = new SuperPerson(p);</span><br><span class="line">p1.superchifan();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="装饰与继承的区别"><a href="#装饰与继承的区别" class="headerlink" title="装饰与继承的区别"></a>装饰与继承的区别</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">MyReader//专门用于读取数据的类。</span><br><span class="line">   |--MyTextReader</span><br><span class="line">       |--MyBufferTextReader</span><br><span class="line">   |--MyMediaReader</span><br><span class="line">       |--MyBufferMediaReader</span><br><span class="line">上面是通过继承的方式实现Buffer功能</span><br><span class="line">class MyBufferReader&#123;</span><br><span class="line">    MyBufferReader(MyTextReader)&#123;&#125;</span><br><span class="line">    MyBufferReader(MyMediaReader)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">上面这个类通过抽取Buffer功能重写构造函数来实现MyTextReader和MyMediaReader的Buffer功能。这个类扩展性太差，找到其参数的共同类型。通过多态的形式，可以提高扩展性。</span><br><span class="line">class MyBufferReader extends MyReader</span><br><span class="line">&#123;</span><br><span class="line">    private MyReader r;</span><br><span class="line">    MyBuffereder(MyReader r)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyReader//专门用于读取数据的类。</span><br><span class="line">    |--MyTextReader</span><br><span class="line">    |--MyMediaReader</span><br><span class="line">这就是装饰设计模式，十分优化，扩展性增强</span><br></pre></td></tr></table></figure><p>装饰模式比继承灵活，避免了继承体系臃肿。降低了类与类之间的关系。</p><p>装饰类因为是增强已有对象，具备的功能和已有对象的功能是相同的，只不过提供了更强功能。所以装饰类和被装饰类通常都是一个体系中的。</p><h3 id="LineNumberReader"><a href="#LineNumberReader" class="headerlink" title="LineNumberReader"></a>LineNumberReader</h3><p>LineNumberReader,跟踪行号的缓冲字符输入流。有方法：</p><ol><li>getLineNumber()：获得当前行号；反会int型</li><li>readLine():读取文本行；返回字符串型</li><li>setLineNumber(int lineNumber)：设置开头字符串的当前行号     </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">import java.io.*;</span><br><span class="line"></span><br><span class="line">class MyLineNumberReader&#123;</span><br><span class="line">    private Reader r;</span><br><span class="line">private int lineNumber;</span><br><span class="line">MyLineNumberReader(Reader r)&#123;</span><br><span class="line">this.r = r;</span><br><span class="line">&#125;</span><br><span class="line">public String myReadLine() throws IOException&#123;</span><br><span class="line">/*此方法用来模拟BufferedReader的readLine()方法；方法在调用时都必须带上()；涉及到IO流，方法都得抛IOException*/</span><br><span class="line">lineNumber++;</span><br><span class="line">StringBuilder sb = new StringBuilder();</span><br><span class="line">int ch = 0;</span><br><span class="line">while((ch=r.read())!=-1)&#123;</span><br><span class="line">if(ch==&apos;\r&apos;)</span><br><span class="line">continue;</span><br><span class="line">if(ch==&apos;\n&apos;)</span><br><span class="line">return sb.toString();</span><br><span class="line">else</span><br><span class="line">sb.append((char)ch);</span><br><span class="line">&#125;</span><br><span class="line">if(sb.length()!=0)</span><br><span class="line">return sb.toString();</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line">public void setlineNumber(int lineNumber)</span><br><span class="line">&#123;</span><br><span class="line">this.lineNumber=lineNumber;</span><br><span class="line">&#125;</span><br><span class="line">public int getlineNumber()&#123;</span><br><span class="line">        return lineNumber;</span><br><span class="line">&#125;</span><br><span class="line">public void myClose() throws IOException&#123;</span><br><span class="line">r.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class MyLineNumberReaderDemo&#123;</span><br><span class="line">    public static void main(String[] args) throws IOException</span><br><span class="line">&#123;</span><br><span class="line">    FileReader fr = new FileReader(&quot;Test.txt&quot;);</span><br><span class="line">MyLineNumberReader mylnr = new MyLineNumberReader(fr);</span><br><span class="line">String line = null;</span><br><span class="line">while((line = mylnr.myReadLine())!=null)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(mylnr.getlineNumber()+&quot;:&quot;+line);</span><br><span class="line">&#125;</span><br><span class="line">mylnr.myClose();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;BufferedReader&quot;&gt;&lt;a href=&quot;#BufferedReader&quot; class=&quot;headerlink&quot; title=&quot;BufferedReader&quot;&gt;&lt;/a&gt;BufferedReader&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;从字符输入流中读取文本，缓冲各个
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Java基础（十四）</title>
    <link href="http://yoursite.com/2018/09/20/9.20java/"/>
    <id>http://yoursite.com/2018/09/20/9.20java/</id>
    <published>2018-09-20T03:36:33.653Z</published>
    <updated>2018-09-20T13:42:51.356Z</updated>
    
    <content type="html"><![CDATA[<h1 id="日积月累"><a href="#日积月累" class="headerlink" title="日积月累"></a>日积月累</h1><h3 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h3><p><strong>1.字段摘要</strong>   </p><ul><li>err：错误输出流</li><li>in：输入流</li></ul><p><strong>2.方法摘要</strong><br>System:类中的方法和属性都是静态的。</p><ul><li>gerProperties()：获取系统属性信息。因为Properties是Hashtable的子类，也就是Map集合的一个子类对象。那么可以通过map的方法取出该集合中的元素。该集合中存储的都是字符串，没有泛型定义。</li><li>setProperty(String key, String value):设置指定键指示的系统属性</li><li>currentTimeMillis():返回以毫秒为单位的当前时间。   </li><li>gc()：运行垃圾回收器   </li></ul><p>java -D:在JVM启动时，动态加载一些属性信息</p><h3 id="Runtime类"><a href="#Runtime类" class="headerlink" title="Runtime类"></a>Runtime类</h3><ol><li>该类中没有提供构造函数，说明不可以new对象，那么会直接想到该类中的方法是静态的。发现该类中还有非静态方法，说明该类肯定会提供了方法来获取本类对象，而且该方法是静态的，并返回值类型是本类类型。   </li><li>这个特点表示了该类使用了单例设计模式。<br>该方法是static Runtime getRuntime()。</li></ol><h3 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h3><ol><li>Date类的构造方法返回的对象是系统时间。  <ol start="2"><li>想要对系统时间进行格式化需要使用DateFormat，然而DateFormat类是抽象的，不能返回对象；使用继承DateFormat类的SimpleDateFormat类来实例化对象。此对象调用父类的format(Date date)方法对系统时间进行格式化。</li></ol></li></ol><h3 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h3><ol><li>Calendar类是抽象类，通过getInstance()方法获取对象。   </li><li>可以通过查表法来将月份和星期几给格式化输出；如：一月星期三（Calendar对象get出的是0和3）。   </li><li>add(int field, int amount)方法：根据日历的规则，为给定的日历字段添加或减去指定的时间量。</li><li>例子：获取任意年的二月有多少天。思路：根据指定年设置一个时间就是c.set(year,2,1)//某一年的3月1日。<br>c.add(Calenar.DAY_OF_MONTH,-1)//3月1日，往前推一天，就是2月最后一天。</li><li>例子：获取昨天的现在这个时刻。c.add(Calendar.DAY_OF_MONTH,-1)。</li></ol><h3 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h3><ol><li>final修饰的类，Math类包含用于执行基本数学运算的方法。</li><li>ceil()方法返回大于指定数据的最小整数。</li><li>floor()方法返回小宇指定数据的最大整数</li><li>round()方法返回四舍五入的整数</li><li>pow(double a,double b)方法返回第一个参数的第二个参数次幂的值</li><li>random()方法返回带正号的 double 值，该值大于等于 0.0 且小于 1.0。返回值是一个伪随机选择的数（是通过算法实现的），在该范围内（近似）均匀分布。 </li></ol><h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><ol><li>IO流用来处理设备之间的数据传输。流按操作数据分为两种：字节流和字符流。按流向分为：输入流，输出流。</li><li>IO流常用基类：字节流的抽象基类：InputStream，OutputStream。字符流的抽象基类：Reader，Writer。由这四个类派生出的子类的名称都是以其其父类名字作为后缀的。</li></ol><hr><h3 id="FileWriter"><a href="#FileWriter" class="headerlink" title="FileWriter"></a>FileWriter</h3><p>Writer是写入字符流的抽象类。子类必须要实现的方法仅有write()和flush()和close()。FileWriter的前缀名表示流对象的功能，后缀名是父类名。</p><ol><li>通过FileWriter类的构造方法，创建一个FileWriter对象。该对象一被初始化就必须要明确被操作的文件（明确目录）。而且该文件会被创建到指定目录下。如果该目录下已有同名文件，则将被覆盖。这一步明确数据要存放的目的地。</li><li>创建FileWriter对象后，FileWriter对象调用父类write()方法，将字符串写入流；对象再调用flush()方法刷新流对象中的缓冲中的数据，将数据刷到目的地中。</li><li>close()方法关闭流，但是关闭前会刷新一次内部缓冲中的数据。将数据刷到目的地中。和flush()的区别：flush刷新后，流可以继续使用，close刷新后，会将流关闭。</li></ol><h3 id="IO异常处理方式"><a href="#IO异常处理方式" class="headerlink" title="IO异常处理方式"></a>IO异常处理方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package io;</span><br><span class="line"></span><br><span class="line">import java.io.*;</span><br><span class="line"></span><br><span class="line">public class FileWriterDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">//        在try语句中创建的fw对象，在finally语句中不能调用；因此需要在外面声明变量</span><br><span class="line">        FileWriter fw = null;</span><br><span class="line">//        FileWriter这种IO流的类在创建对象和调用方法时都要try和catch。</span><br><span class="line">        try &#123;</span><br><span class="line">            fw = new FileWriter(&quot;demo.txt&quot;);</span><br><span class="line">            fw.write(&quot;ada&quot;);</span><br><span class="line"></span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">//            关闭资源的方法放在finally中，fw对象使用close方法时也要try和catch</span><br><span class="line">            try &#123;</span><br><span class="line">//            判断一下fw是否为空，这样增强了代码的健壮性</span><br><span class="line">                if(fw!=null)</span><br><span class="line">                   fw.close();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件的续写"><a href="#文件的续写" class="headerlink" title="文件的续写"></a>文件的续写</h3><p>FileWriter的构造方法中有一个是：FileWriter(String fileName,boolean append)。传递一个true参数，表示可以附加写入数据，在已有文件末尾处添加数据。</p><h3 id="文本文件的读取方式"><a href="#文本文件的读取方式" class="headerlink" title="文本文件的读取方式"></a>文本文件的读取方式</h3><ol><li>通过FileReader()构造方法创建一个新的FileReader对象，和指定名称的文件相关联。要保证该文件是已经存在的，如果不存在，会发生异常FileNotFoundException</li><li>FileReader对象调用读取流对象的read方法。read()方法：一次读取一个字符，而且会自动往下读，返回int型。如果已到达流的末尾，则返回 -1 。<blockquote><p>read(char[] char)方法，通过字符数组进行读取。将读到的数据写入char数组。返回的也是int型。</p></blockquote></li></ol><h3 id="拷贝文件"><a href="#拷贝文件" class="headerlink" title="拷贝文件"></a>拷贝文件</h3><p><img src="/images/IOcopy.png" alt=""></p><h3 id="BufferedWriter"><a href="#BufferedWriter" class="headerlink" title="BufferedWriter"></a>BufferedWriter</h3><ol><li>功能：将文本写入字符输出流，缓冲各个字符，从而提供单个字符、数组和字符串的高效写入。</li><li>缓冲区的出现是为了提高流的操作效率而出现的。所以在创建缓冲区之前，必须要先有流对象。</li><li>只需要将需要被提高效率的流对象作为参数传递给缓冲区的构造函数即可。</li><li>通过缓冲区的构造函数新建的对象能调用父类的方法进行write和flush和close。不过缓冲区的close方法其实是关闭了FileWriter对象（缓冲区中的流对象）。</li><li>newLine()方法：写入一个行分隔符，能跨平台。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;日积月累&quot;&gt;&lt;a href=&quot;#日积月累&quot; class=&quot;headerlink&quot; title=&quot;日积月累&quot;&gt;&lt;/a&gt;日积月累&lt;/h1&gt;&lt;h3 id=&quot;System类&quot;&gt;&lt;a href=&quot;#System类&quot; class=&quot;headerlink&quot; title=&quot;Sys
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="第18天" scheme="http://yoursite.com/tags/%E7%AC%AC18%E5%A4%A9/"/>
    
  </entry>
  
  <entry>
    <title>Java后端学习线路</title>
    <link href="http://yoursite.com/2018/09/19/9.19%E5%AD%A6%E4%B9%A0%E7%BA%BF%E8%B7%AF/"/>
    <id>http://yoursite.com/2018/09/19/9.19学习线路/</id>
    <published>2018-09-19T03:39:31.096Z</published>
    <updated>2018-09-19T07:57:24.183Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java后端学习线路图（转自CSDN和开源中国等学习网站）"><a href="#Java后端学习线路图（转自CSDN和开源中国等学习网站）" class="headerlink" title="Java后端学习线路图（转自CSDN和开源中国等学习网站）"></a>Java后端学习线路图（转自CSDN和开源中国等学习网站）</h2><h3 id="Java工程师学习线路"><a href="#Java工程师学习线路" class="headerlink" title="Java工程师学习线路"></a>Java工程师学习线路</h3><p><img src="/images/Java线路.png" alt="">  </p><p><img src="/images/Web1.png" alt="">   </p><p><img src="/images/Java学习大纲1.jpg" alt=""></p><h3 id="Java工程师学习线路详细"><a href="#Java工程师学习线路详细" class="headerlink" title="Java工程师学习线路详细"></a>Java工程师学习线路详细</h3><p><img src="/images/Java详细.png" alt="">   </p><p><img src="/images/Java学习知识点1.jpg" alt=""></p><h3 id="Java后端工程师技能树"><a href="#Java后端工程师技能树" class="headerlink" title="Java后端工程师技能树"></a>Java后端工程师技能树</h3><p><img src="/images/Java技能树.jpg" alt="">   </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java后端学习线路图（转自CSDN和开源中国等学习网站）&quot;&gt;&lt;a href=&quot;#Java后端学习线路图（转自CSDN和开源中国等学习网站）&quot; class=&quot;headerlink&quot; title=&quot;Java后端学习线路图（转自CSDN和开源中国等学习网站）&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>数据库创建</title>
    <link href="http://yoursite.com/2018/09/18/9.18%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://yoursite.com/2018/09/18/9.18数据库/</id>
    <published>2018-09-18T00:40:43.728Z</published>
    <updated>2018-09-24T09:53:06.949Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql建数据库的字符集与排序规则说明"><a href="#mysql建数据库的字符集与排序规则说明" class="headerlink" title="mysql建数据库的字符集与排序规则说明"></a>mysql建数据库的字符集与排序规则说明</h1><h2 id="字符集说明"><a href="#字符集说明" class="headerlink" title="字符集说明"></a>字符集说明</h2><p>一般选择utf8，utf8mb4兼容utf8，且比utf8能表示更多的字符。unicode编码区从1 ～ 126就属于传统utf8区，当然utf8mb4也兼容这个区，126行以下就是utf8mb4扩充区，什么时候你需要存储那些字符，你才用utf8mb4,否则只是浪费空间。</p><h2 id="排序说明"><a href="#排序说明" class="headerlink" title="排序说明"></a>排序说明</h2><p>排序一般分为两种：utf_bin和utf_general_ci<br>bin 是二进制, a 和 A 会别区别对待.<br>例如你运行:<br>SELECT * FROM table WHERE txt = ‘a’<br>那么在utf8_bin中你就找不到 txt = ‘A’ 的那一行, 而 utf8_general_ci 则可以.<br>utf8_general_ci 不区分大小写，这个你在注册用户名和邮箱的时候就要使用。<br>utf8_general_cs 区分大小写，如果用户名和邮箱用这个不便于管理。</p><h2 id="SQL命令"><a href="#SQL命令" class="headerlink" title="SQL命令"></a>SQL命令</h2><p>参考网站：<a href="http://www.w3school.com.cn/sql/sql_insert.asp" target="_blank" rel="noopener">W3school</a></p><h2 id="JDBC教程"><a href="#JDBC教程" class="headerlink" title="JDBC教程"></a>JDBC教程</h2><p>参考网站：<a href="https://www.yiibai.com/jdbc/jdbc-sql-syntax.html" target="_blank" rel="noopener">https://www.yiibai.com/jdbc/jdbc-sql-syntax.html</a></p><h2 id="sql创建表语句"><a href="#sql创建表语句" class="headerlink" title="sql创建表语句"></a>sql创建表语句</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tab_sersor(</span><br><span class="line">date datetime not null PRIMARY KEY  ,</span><br><span class="line">temp  numeric(6,2) NOT NULL,</span><br><span class="line">humi  numeric(6,2) NOT NULL,</span><br><span class="line">illu INT(6) NOT NULL</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tab_sensor(</span><br><span class="line">id int primary key auto_increment,</span><br><span class="line">temp  numeric(6,2) ,</span><br><span class="line">humi  numeric(6,2) ,</span><br><span class="line">illu INT(6) ,</span><br><span class="line">date datetime </span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;mysql建数据库的字符集与排序规则说明&quot;&gt;&lt;a href=&quot;#mysql建数据库的字符集与排序规则说明&quot; class=&quot;headerlink&quot; title=&quot;mysql建数据库的字符集与排序规则说明&quot;&gt;&lt;/a&gt;mysql建数据库的字符集与排序规则说明&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="DataBase" scheme="http://yoursite.com/categories/DataBase/"/>
    
    
      <category term="数据库的字符集与排序规则说明" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%8E%E6%8E%92%E5%BA%8F%E8%A7%84%E5%88%99%E8%AF%B4%E6%98%8E/"/>
    
      <category term="SQL命令" scheme="http://yoursite.com/tags/SQL%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>mysql8.0.12版本安装</title>
    <link href="http://yoursite.com/2018/09/17/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2018/09/17/数据库安装/</id>
    <published>2018-09-17T13:39:38.136Z</published>
    <updated>2018-09-20T12:19:02.514Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql8-0-12版本zip格式安装"><a href="#mysql8-0-12版本zip格式安装" class="headerlink" title="mysql8.0.12版本zip格式安装"></a>mysql8.0.12版本zip格式安装</h1><h2 id="mysql8-0-12下载地址"><a href="#mysql8-0-12下载地址" class="headerlink" title="mysql8.0.12下载地址:"></a>mysql8.0.12下载地址:</h2><p><a href="https://dev.mysql.com/downloads/mysql/5.5.html#downloads" target="_blank" rel="noopener">https://dev.mysql.com/downloads/mysql/5.5.html#downloads</a></p><h2 id="安装步骤："><a href="#安装步骤：" class="headerlink" title="安装步骤："></a>安装步骤：</h2><h3 id="1-解压。"><a href="#1-解压。" class="headerlink" title="1. 解压。"></a>1. 解压。</h3><h3 id="2-新建配置文件my-ini文件（有则不建）；将如下代码中的mysql安装目录和mysql数据库的存放目录修改后，拷入my-ini配置文件。"><a href="#2-新建配置文件my-ini文件（有则不建）；将如下代码中的mysql安装目录和mysql数据库的存放目录修改后，拷入my-ini配置文件。" class="headerlink" title="2. 新建配置文件my.ini文件（有则不建）；将如下代码中的mysql安装目录和mysql数据库的存放目录修改后，拷入my.ini配置文件。"></a>2. 新建配置文件my.ini文件（有则不建）；将如下代码中的mysql安装目录和mysql数据库的存放目录修改后，拷入my.ini配置文件。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"># 设置3306端口</span><br><span class="line">port=3306</span><br><span class="line"># 设置mysql的安装目录</span><br><span class="line">basedir=D:\mysql-8.0.12-winx64</span><br><span class="line"># 设置mysql数据库的数据的存放目录</span><br><span class="line">datadir=D:\mysql-8.0.12-winx64\data</span><br><span class="line"># 允许最大连接数</span><br><span class="line">max_connections=200</span><br><span class="line"># 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统</span><br><span class="line">max_connect_errors=10</span><br><span class="line"># 服务端使用的字符集默认为UTF8</span><br><span class="line">character-set-server=utf8</span><br><span class="line"># 创建新表时将使用的默认存储引擎</span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line"># 默认使用“mysql_native_password”插件认证</span><br><span class="line">default_authentication_plugin=mysql_native_password</span><br><span class="line">[mysql]</span><br><span class="line"># 设置mysql客户端默认字符集</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[client]</span><br><span class="line"># 设置mysql客户端连接服务端时默认使用的端口</span><br><span class="line">port=3306</span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure><h3 id="3-数据库配置"><a href="#3-数据库配置" class="headerlink" title="3. 数据库配置"></a>3. 数据库配置</h3><p><strong>通过管理员权限进入CMD（必须使用管理员权限），进入mysql安装目录下的bin目录下。</strong><br>按照如下步骤依次输入命令行：<br>①输入<strong>mysqld –initialize –console</strong>，在<strong>root@localhost:</strong> 后的就是root用户的初始密码，必须要记下它，下面的登录步骤会用到。如果不小心没记住，可以删掉初始化的data目录，再执行一遍初始化命令又会重新生成。<br>②输入<strong>mysqld –install</strong>安装mysql服务，输入<strong>net start mysql</strong>启动服务。<em>（<strong>mysqld –remove</strong>是卸载MySql服务，<strong>net stop mysql</strong>是停止服务。）</em><br>③输入<strong>mysql -u root -p</strong>，会提示让输入之前第一步中root的密码，输入正确后会提示Welcome to the MySQL monitor.<br>④输入<strong>ALTER USER ‘root‘@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘新密码’;</strong>。如果出现了Query OK,0 rows affected表示更改成功    </p><p>—mysql8.0.12安装完成—</p><h3 id="4-数据库相关配置"><a href="#4-数据库相关配置" class="headerlink" title="4.数据库相关配置"></a>4.数据库相关配置</h3><p>查看默认数据库：<strong>show databases;</strong><br>选择mysql数据库: <strong>use mysql</strong><br>查看默认MySQL用户： <strong>select host,user,authentication_string,plugin from user;</strong><br>创建新用户： <strong>CREATE USER ‘用户名‘@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘密码’;</strong><br>给新用户授权： <strong>GRANT ALL PRIVILEGES ON *.* TO ‘用户名‘@’localhost’;<br>刷新权限： FLUSH PRIVILEGES;</strong></p><h2 id="本文参考CSDN文章"><a href="#本文参考CSDN文章" class="headerlink" title="本文参考CSDN文章"></a>本文参考CSDN文章</h2><p><a href="https://blog.csdn.net/missing2011/article/details/81474857" target="_blank" rel="noopener">MySQL8.0.12 安装及配置</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;mysql8-0-12版本zip格式安装&quot;&gt;&lt;a href=&quot;#mysql8-0-12版本zip格式安装&quot; class=&quot;headerlink&quot; title=&quot;mysql8.0.12版本zip格式安装&quot;&gt;&lt;/a&gt;mysql8.0.12版本zip格式安装&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="DataBase" scheme="http://yoursite.com/categories/DataBase/"/>
    
    
      <category term="mysql安装" scheme="http://yoursite.com/tags/mysql%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>课设传感器</title>
    <link href="http://yoursite.com/2018/09/17/9.17%E8%AF%BE%E8%AE%BE/"/>
    <id>http://yoursite.com/2018/09/17/9.17课设/</id>
    <published>2018-09-17T13:24:06.798Z</published>
    <updated>2018-09-18T12:46:15.967Z</updated>
    
    <content type="html"><![CDATA[<h2 id="传感器的网络地址与数据"><a href="#传感器的网络地址与数据" class="headerlink" title="传感器的网络地址与数据"></a>传感器的网络地址与数据</h2><h3 id="单独只开光照传感器"><a href="#单独只开光照传感器" class="headerlink" title="单独只开光照传感器"></a>单独只开光照传感器</h3><blockquote><p>第一次取样：<br>02 08 18 00 F1 <em>FD 66</em> 01 7F AE AA<br>02 08 18 00 F1 <em>FD 66</em> 01 BC AD 6A<br>02 08 18 00 F1 <em>FD 66</em> 01 BC AD 6A<br>02 08 18 00 F1 <em>FD 66</em> 01 B8 9F 5C<br>02 08 18 00 F1 <em>FD 66</em> 01 32 9E D7<br>第二次取样：<br>02 08 18 00 F1 <em>FD 66</em> 01 9A AB 4A<br>02 08 18 00 F1 <em>FD 66</em> 01 FE AA 2F<br>02 08 18 00 F1 <em>FD 66</em> 01 9A AB 4A<br>02 08 18 00 F1 <em>FD 66</em> 01 5D AC 8A<br>02 08 18 00 F1 <em>FD 66</em> 01 C1 AB 11     </p></blockquote><p>66 FD是光照传感器的网络地址（第6,7个字符串)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">AE 7F 44671</span><br><span class="line">AD BC 44476</span><br><span class="line">9F B8 40888</span><br><span class="line">9E 32 40498</span><br><span class="line">AB 9A 43930</span><br><span class="line">AA FE 43774</span><br><span class="line">AB 9A 43930</span><br><span class="line">AC 5D 44125</span><br><span class="line">AB C1 43969</span><br></pre></td></tr></table></figure><p>分析可知，第9,10个字符串的逆序就是传感器采集出的光照数据。</p><hr><h3 id="单独只开温湿度传感器"><a href="#单独只开温湿度传感器" class="headerlink" title="单独只开温湿度传感器"></a>单独只开温湿度传感器</h3><blockquote><p>第一次取样：<br>02 08 18 00 F1 <em>F5 3D</em> 01 84 F0 5C<br>02 08 18 00 F1 <em>F5 3D</em> 02 10 27 1C<br>02 14 18 00 F1 <em>A1 92</em> 01 02 5D E0<br>53 05 00 4B 12 00 00 00 63 F0 0B E7<br>02 08 18 00 F1 <em>F5 3D</em> 01 84 F0 5C<br>02 08 18 00 F1 <em>F5 3D</em> 02 10 27 1C<br>02 08 18 00 F1 <em>F5 3D</em> 01 84 F0 5C<br>02 08 18 00 F1 <em>F5 3D</em> 02 10 27 1C   </p></blockquote><p>其中3D F5是网络地址（第6,7个字符）<br>01 代表温度传感器 02 代表湿度传感器  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">F0 84 61572</span><br><span class="line">27 10 10000</span><br><span class="line">5D 02 23810</span><br><span class="line">F0 84 61572</span><br><span class="line">27 10 10000</span><br></pre></td></tr></table></figure><p>分析可知，第9,10个字符串的逆序表示温度或者湿度。</p><hr><p>02 08 18 00 F1 26 87 01 <strong>84 F0</strong> 35<br>02 08 18 00 F1 26 87 01 <strong>84 F</strong>0 35<br>02 08 18 00 F1 26 87 02 <strong>10 27</strong> 75<br>02 08 18 00 F1 26 87 01 <strong>84 F0</strong> 35<br>02 08 18 00 F1 26 87 02 <strong>10 27</strong> 75  </p><p>02 08 18 00 F1 B3 56 01 <strong>BC AD</strong> 14<br>02 08 18 00 F1 B3 56 01 <strong>E3 AD</strong> 4B<br>02 08 18 00 F1 B3 56 01 <strong>0A AE</strong> A1  </p><h2 id="控制器的控制"><a href="#控制器的控制" class="headerlink" title="控制器的控制"></a>控制器的控制</h2><p>4个指示灯全部关闭<br>02 07 18 00 F1 <em>82 31</em> 01 <strong>00</strong> 5C<br>02 07 18 00 F1 <em>82 31</em> 01 <strong>00</strong> 5C<br>开D10<br>02 07 18 00 F1 <em>82 31</em> 01 <strong>04</strong> 58<br>开D10,D5<br>02 07 18 00 F1 <em>82 31</em> 01 <strong>05</strong> 59<br>全开<br>02 07 18 00 F1 <em>82 31</em> 01 <strong>0F</strong> 53<br>开D5,D7<br>02 07 18 00 F1 <em>82 31</em> 01 <strong>03</strong> 5F    </p><p>可以得出在控制器上，四个指示灯对应4位二进制数，表示了控制器状态的16进制数据。<br><img src="/images/keshe.png" alt="zigbee控制节点"></p><h2 id="读取zigbee传感器数据的jar包"><a href="#读取zigbee传感器数据的jar包" class="headerlink" title="读取zigbee传感器数据的jar包"></a>读取zigbee传感器数据的jar包</h2><p><strong>参考文章：</strong></p><p><a href="https://blog.csdn.net/daditao/article/details/24620365" target="_blank" rel="noopener">Java使用开源Rxtx实现串口通讯(串口开发)</a></p><p><a href="http://users.frii.com/jarvi/rxtx/download.html" target="_blank" rel="noopener">Rxtx开源包下载地址</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;传感器的网络地址与数据&quot;&gt;&lt;a href=&quot;#传感器的网络地址与数据&quot; class=&quot;headerlink&quot; title=&quot;传感器的网络地址与数据&quot;&gt;&lt;/a&gt;传感器的网络地址与数据&lt;/h2&gt;&lt;h3 id=&quot;单独只开光照传感器&quot;&gt;&lt;a href=&quot;#单独只开光照传感
      
    
    </summary>
    
      <category term="大四课设" scheme="http://yoursite.com/categories/%E5%A4%A7%E5%9B%9B%E8%AF%BE%E8%AE%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>简历规范</title>
    <link href="http://yoursite.com/2018/09/15/9.15/"/>
    <id>http://yoursite.com/2018/09/15/9.15/</id>
    <published>2018-09-15T08:14:39.602Z</published>
    <updated>2018-09-15T09:06:59.622Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安卓基础"><a href="#安卓基础" class="headerlink" title="安卓基础"></a>安卓基础</h1><h3 id="开发基础设施"><a href="#开发基础设施" class="headerlink" title="开发基础设施"></a>开发基础设施</h3><blockquote><p>软件开发基础设施</p></blockquote><ol><li>安装金山打字通，现场测速测规范</li><li>常用Windows快捷键<ul><li>win + D显示桌面</li><li>win + E打开文件资源管理器</li><li>win + R<ul><li>ncpa.cpl打开网络连接</li><li>firewall.cpl打开防火墙</li><li>calc打开计算器</li><li>contorl打开控制面板</li><li>services.msc打开服务</li><li>mspaint打开画板</li><li>notepad打卡记事本</li><li>msconfig打开系统配置</li><li>regdit打开注册表</li></ul></li></ul></li><li>文本编辑器<ul><li>Atom</li><li>Notepad++</li><li>Subline</li><li>UltraEdit</li><li>VS Code</li></ul></li><li>Xmind</li><li>专业浏览器<ul><li>Chrome</li><li>FireFox</li><li>Opera</li></ul></li><li>如何高效搜索网络资源</li><li>需要学习的网站<ul><li>dzone.com</li><li>csdn.net</li><li>51cto.com.cn</li><li>iteye.com</li></ul></li><li>Git基础操作</li><li>代码规范检查工具CheckStyle、代码缺陷检查工具PMD</li><li>WLS，IDM</li><li>Linux云端部署</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安卓基础&quot;&gt;&lt;a href=&quot;#安卓基础&quot; class=&quot;headerlink&quot; title=&quot;安卓基础&quot;&gt;&lt;/a&gt;安卓基础&lt;/h1&gt;&lt;h3 id=&quot;开发基础设施&quot;&gt;&lt;a href=&quot;#开发基础设施&quot; class=&quot;headerlink&quot; title=&quot;开发基础设
      
    
    </summary>
    
      <category term="就业" scheme="http://yoursite.com/categories/%E5%B0%B1%E4%B8%9A/"/>
    
    
      <category term="简历" scheme="http://yoursite.com/tags/%E7%AE%80%E5%8E%86/"/>
    
  </entry>
  
</feed>
